@page "/home/{BuldingType}/task/{TaskType}/{TaskService}";
@page "/home/{BuldingType}/task/{TaskType}/{TaskService}/{HomeTaskId}";
@page "/home/{BuldingType}/task/{TaskType}/{TaskService}/project/{ProjectId}";

@inject AutoMapper.IMapper _mapper;
@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper;
@inject UiJsHandler UiJsHandler;
@inject TaskSvc TaskSvc;
@inject IHHLQueryExecutionSvc _HHLQueryExecutionSvc;
@inject InstantDatahandler InstantDatahandler;
@inject ClientSvc ClientSvc;
@inject AddressSvc AddressSvc;
@inject IFileReaderService fileReaderService;

<EditForm Model="@AddNewHomeTaskModel" OnValidSubmit="@HandleAddNewHomeTaskModelSubmit">
    <DataAnnotationsValidator />

    <uContainer AllignCols="center" IsDefault="true" IsFullHeight="true">

        <uCol>


            <uContainer>

                <uCol CustomClass="mb-25 pt-35">

                    <uContainer CustomClassRow="mx-15">


                        <uCol Grow="1" AlignCol="center">
                            <div>
                                <h3 class="font-blue font-weight-normal mb-0"><span class="font-silver">Task:</span> @TaskCategoryView.HomeTaskTypeName <span class="font-weight-semi-bold">@TaskCategoryView.HomeTaskServiceTypeName</span></h3>
                                <div>
                                    <span class="btn btn-xs btn-soft-green">$<span class="font-weight-semi-bold">@($"{AddNewHomeTaskModel.PriceBaseFinal.ToString("#.##")}")</span> per hour</span>
                                    <span class="btn btn-xs btn-soft-indigo">Minimum <span class="font-weight-semi-bold">@($"{TaskCategory.MinHours.ToString("#.#")}")</span> hours</span>
                                </div>
                            </div>

                        </uCol>

                        <uCol Grow="1" AlignCol="center" CustomStyle="text-align:right;">


                            <uCheckbox IsForm="true" Title="Use Primary Contact Info" Id="UseClientPrimaryContactInfo">
                                <InputCustomCheckbox bind-Value="@AddNewHomeTaskModel.UseClientPrimaryContactInfo" IsCustomChecked="@AddNewHomeTaskModel.UseClientPrimaryContactInfo" OnCustomChange="@HandleUseClientPrimaryContactInfoChange" class="custom-control-input custom-control-input-notshadowfocus" id="UseClientPrimaryContactInfo" />
                            </uCheckbox>
                        </uCol>




                    </uContainer>

                </uCol>




                @* <uCol>

                                   <uContainer CustomClassContainer="mb-15">


                        <uCol AlignCol="center" CustomClass="mx-15">

                            @if (!Errors.IsNullOrEmpty())
                            {

                                <div class="mb-20">

                                    @foreach (var error in Errors)
                                    {
                                        <div class="validation-message">
                                            @error.Message
                                        </div>
                                    }
                                </div>


                            }

                        </uCol>

                    </uContainer>

                                </uCol>*@


                <uCol CustomClass="mb-15">
                    <uContainer>


                        <uCol Grow="2" AlignCol="center" CustomClass="mx-15">

                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Task Name" Id="Name">

                                <InputCustomText bind-Value="@AddNewHomeTaskModel.Name" id="Name" class="form-control" Placeholder="Enter Task Name" />

                            </uFormInput>






                        </uCol>

                        <uCol Width="120px" AlignCol="center" CustomClass="mx-15">
                            @*<uFormInput IsGroup="true" Type="child" Label="@($"Estimated Hours {HoursAndMin.Hours} hrs {HoursAndMin.Minutes} min")" Id="EstimatedHours">*@
                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="@($"Estimated Hrs")" Id="EstimatedHours">

                                @*bug with custom control*@
                                <InputCustomNumber bind-Value="@AddNewHomeTaskModel.EstimatedHours" id="EstimatedHours" OnCustomChange="@HandleEstimatePriceChangeChange" class="form-control" Min="@TaskCategory.MinHours.ToString()" Step="0.25" />
                                @*<InputNumber bind-Value="@AddNewHomeTaskModel.EstimatedHours" id="EstimatedHours"  class="form-control" />*@
                                @*<ValidationMessage for="@(()=> AddNewHomeTaskModel.Name.EstimatedHours)" />*@


                            </uFormInput>


                        </uCol>
                        <uCol Width="230px" AlignCol="center" CustomClass="mx-15">

                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Preferred Start Date" Id="DateStart">
                                <InputCustomDateTimeLocal bind-Value="@AddNewHomeTaskModel.DateStart" id="DateStart" class="form-control" />
                            </uFormInput>


                        </uCol>

                        @*<uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                                <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" Address" Id="AddressId">
                                    <InputCustomSelect bind-Value="@AddNewHomeTaskModel.AddressId" isDisabled="@(AddNewHomeTaskModel.AddressId == null)" id="AddressId" class="form-control custom-select">
                                        @foreach (var l in ClientAddresses)
                                        {
                                            <option value="@l.Id">@l.Line1, @l.CityName, @l.RegionName , @l.CountryName @l.PostalCode</option>
                                        }
                                    </InputCustomSelect>

                                </uFormInput>


                            </uCol>*@

                        <uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Priority" Id="PriorityId">
                                <InputCustomSelect bind-Value="@AddNewHomeTaskModel.PriorityId" id="PriorityId" class="form-control custom-select">
                                    @foreach (var l in PrioritySelectModels.OrderBy(q => q.Id))
                                    {
                                        <option value="@l.Id">@l.Name</option>
                                    }
                                </InputCustomSelect>

                            </uFormInput>


                        </uCol>



                    </uContainer>
                </uCol>


                <uCol CustomClass="mb-15">
                    <uContainer>


                        <uCol Grow="1" AlignCol="center" CustomClass="mx-15">


                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" Address" Id="AddressId">
                                <InputCustomSelect bind-Value="@AddNewHomeTaskModel.AddressId" isDisabled="@(AddNewHomeTaskModel.AddressId == null)" id="AddressId" class="form-control custom-select">
                                    @foreach (var l in ClientAddresses)
                                    {
                                        <option value="@l.Id">@l.Line1, @l.CityName, @l.RegionName , @l.CountryName @l.PostalCode</option>
                                    }
                                </InputCustomSelect>

                            </uFormInput>


                        </uCol>


                        <uCol Grow="1" AlignCol="center" CustomClass="mx-15">


                            <uButton Type="NavButton" Href="@UrlNameHdr.ClientEditAddresses" Title="Manage Addresses" isSoft="true" IsTransition="true" CustomClass="mx-15" />


                        </uCol>

                    </uContainer>

                </uCol>


                @if (!AddNewHomeTaskModel.UseClientPrimaryContactInfo)
                {
                    <uCol CustomClass="mb-15">
                        <uContainer>


                            <uCol Width="200px" CustomClass="mx-15">
                                <uFormInput IsGroup="true" Type="child" Label="Country Code" Id="PrimaryPhoneCountryCodeId">
                                    <InputCustomSelect bind-Value="@AddNewHomeTaskModel.ContactCountryCodeId" id="PrimaryPhoneCountryCodeId" class="form-control custom-select" Placeholder="+1">
                                        <option>Select Code </option>
                                        @foreach (var l in CountryCodeSelectModels)
                                        {
                                            <option value="@l.Id">+ @l.PhoneCode @l.Name</option>
                                        }

                                    </InputCustomSelect>

                                </uFormInput>

                            </uCol>


                            <uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                                <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Contact Phone Number" Id="ContactPhoneNumber">
                                    <InputCustomText bind-Value="@AddNewHomeTaskModel.ContactPhoneNumber" id="ContactPhoneNumber" class="form-control" Placeholder="@($"(000) 000 0000")" />
                                    <ValidationMessage for="@(() => AddNewHomeTaskModel.ContactPhoneNumber)" />
                                </uFormInput>

                            </uCol>


                            <uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                                <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Contact Email" Id="ContactEmail">
                                    <InputCustomText bind-Value="@AddNewHomeTaskModel.ContactEmail" id="ContactEmail" class="form-control" Placeholder="@($"example@gmail.com")" />
                                    <ValidationMessage for="@(() => AddNewHomeTaskModel.ContactEmail)" />
                                </uFormInput>

                            </uCol>


                        </uContainer>
                    </uCol>
                }


                <uCol CustomClass="mb-15">
                    <uContainer>


                        <uCol Grow="1" AlignCol="center" CustomClass="mx-15">


                            <uFormInput IsGroup="true" Type="child" Label="Details" Id="Description">

                                <InputCustomTextArea Row="3" bind-Value="@AddNewHomeTaskModel.Description" id="Description" class="form-control" Placeholder="Enter additional details" />
                                <ValidationMessage for="@(() => AddNewHomeTaskModel.Description)" />

                            </uFormInput>


                        </uCol>

                    </uContainer>

                </uCol>


                @*<uCol CustomClass="mb-15">
                        <uContainer>


                            @foreach (var image in TaskImages)
                            {

                                <uCol Width="145px" CustomClass="mx-15 mt-15">

                                    <img src="@image.FileUploadImageData" width="200" height="200" />

                                </uCol>
                            }


                            <uCol Width="145px" CustomClass="mx-15 mt-15">


                                <input type="file" onchange="@(e => UploadImageFile(e, AddImageFileElementModel))" ref="AddImageFileElementModel.Element" id="@AddImageFileElementModel.ElementId" style="visibility: hidden; position:absolute; z-index:-100;" />

                                <uButton IsSoft="true" Color="grain" CustomOnClickv2="@(e => UploadButtonClick(e, AddImageFileElementModel))" CustomStyle="width:100%;height:100%">
                                    <div>
                                        <uFontAwesomeIcon Thickness="s" Size="14px" Icon="plus" />
                                    </div>
                                    <div class="pb-2">
                                        Add Image
                                    </div>



                                </uButton>

                            </uCol>

                        </uContainer>

                    </uCol>*@


                <uCol CustomClass="mb-15">

                    <uContainer>

                        @if (BrandFS != null)
                        {
                            <uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                                <uFormInput IsGroup="true" Type="child" Label="@BrandFS.Title" Id="Brand">
                                    <InputCustomText bind-Value="@AddNewHomeTaskModel.Brand" id="Brand" class="form-control" Placeholder="@($"ex. Samsung")" />
                                </uFormInput>

                            </uCol>

                        }

                        @if (ModelFS != null)
                        {
                            <uCol Grow="1" AlignCol="center" CustomClass="mx-15">

                                <uFormInput IsGroup="true" Type="child" Label="@ModelFS.Title" Id="Brand">
                                    <InputCustomText bind-Value="@AddNewHomeTaskModel.Model" id="Brand" class="form-control" Placeholder="@($"ex. Number, Vendor and etc.")" />
                                </uFormInput>

                            </uCol>

                        }

                    </uContainer>

                </uCol>





                <uCol>
                    <uContainer CustomClassRow="mx-15">
                        <uCol Grow="1" AlignCol="center">

                            <span class="font-size-18"> Total:   <span class="font-weight-normal-bold">$ @AddNewHomeTaskModel.PriceTotal.ToString("#.00")</span> </span>

                        </uCol>

                        <uCol Grow="1" AlignCol="center" CustomStyle="text-align:right;">


                            @*<span class=" font-weight-normal-bold">@AddNewHomeTaskModel.PriceTotal.ToString("#.00")</span> </span>*@
                            <uButton Type="Submit" isSoft="true" Color="green" Title="">
                                <uFontAwesomeIcon Icon="check" CustomClass="mr-5" />

                                Review and Process
                            </uButton>

                        </uCol>

                    </uContainer>


                </uCol>



            </uContainer>

        </uCol>

    </uContainer>
</EditForm>


@functions {

    [Parameter]
    private string BuldingType { get; set; }

    [Parameter]
    private string TaskType { get; set; }

    [Parameter]
    private string TaskService { get; set; }

    [Parameter]
    private string HomeTaskId { get; set; }

    [Parameter]
    private string ProjectId { get; set; }

    List<FormSettingModel> FormSettings = new List<FormSettingModel>();

    IEnumerable<ErrorMdl> Errors;

    [Parameter]
    private bool isLoading { get; set; } = false;

    [Parameter]
    Guid? AddressId { get; set; }

    e_Client ClientAccount { get; set; }

    e_HomeTaskCategory TaskCategory { get; set; }

    v_VmHomeTaskCategory TaskCategoryView { get; set; }

    AddNewHomeTaskModel AddNewHomeTaskModel = new AddNewHomeTaskModel();

    List<v_Address> ClientAddresses { get; set; } = new List<v_Address>();

    List<AddImageFileElementModel> TaskImages { get; set; } = new List<AddImageFileElementModel>();

    AddImageFileElementModel AddImageFileElementModel = new AddImageFileElementModel("newImage");

    IEnumerable<CountryCodeSelectModel> CountryCodeSelectModels { get; set; } = Enumerable.Empty<CountryCodeSelectModel>();

    IEnumerable<PrioritySelectModel> PrioritySelectModels { get; set; } = Enumerable.Empty<PrioritySelectModel>();


    TimeSpan HoursAndMin;

    e_Address ClientAddress;
    e_Phone ClientPrimaryPhoneNumber;
    e_Email ClientEmail;
    e_HomeTask SavedTask;
    e_Address SavedAddress;

    //FormSettings

    FormSettingModel BrandFS;
    FormSettingModel ModelFS;



    protected override async Task OnInitializedAsync()
    {

        if (!_HHLQueryExecutionSvc._AuthSessionSvc.IsAuthenticated)
        {

            UriHelper.NavigateTo("/signin", true);
        }




        var taskType = TaskType.FromUrl();
        var taskService = TaskService.FromUrl();
        var buldingType = String.Equals(BuldingType, "residential", StringComparison.OrdinalIgnoreCase) ? 1 : 2;


        var category = InstantDatahandler.All_VmHomeTaskCategories.First(
        q => q.HomeBuldingTypeId == buldingType &&
        q.IsActive &&
        string.Equals(q.HomeTaskTypeName, taskType, StringComparison.OrdinalIgnoreCase) &&
        string.Equals(q.HomeTaskServiceTypeName, taskService, StringComparison.OrdinalIgnoreCase));

        TaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == category.Id);
        TaskCategoryView = InstantDatahandler.All_VmHomeTaskCategories.First(q => q.Id == category.Id);

        if (!string.IsNullOrEmpty(TaskCategory.FormSettings))
        {
            FormSettings = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FormSettingModel>>(TaskCategory.FormSettings);
        }

        var dtln = DateTime.Now;
        var tTaskDateStart = new DateTime(dtln.Year, dtln.Month, dtln.Day, dtln.Hour, 0, 0).AddHours(24);

        AddNewHomeTaskModel.PriceBase = HHLConfigHdr.PricePerHourSell;
        AddNewHomeTaskModel.PriceMultiplier = TaskCategory.PriceMultiplier;
        AddNewHomeTaskModel.PriceBaseFinal = AddNewHomeTaskModel.PriceBase * AddNewHomeTaskModel.PriceMultiplier;


        CountryCodeSelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountryCodeSelectModel>>(InstantDatahandler.All_Countries);
        PrioritySelectModels = _mapper.Map<IEnumerable<e_Priority>, IEnumerable<PrioritySelectModel>>(InstantDatahandler.All_Priorities);
        var ClientAccount = await ClientSvc.SelectCurrent();

        if (HomeTaskId != null)
        {

            SavedTask = _HHLQueryExecutionSvc.SELECTbyId<e_HomeTask>(new Guid(HomeTaskId)).FirstOrDefault;
            AddNewHomeTaskModel.Name = SavedTask.Name;
            AddNewHomeTaskModel.ClientId = SavedTask.ClientId;
            AddNewHomeTaskModel.HomeTaskCategoryId = SavedTask.HomeTaskCategoryId;
            AddNewHomeTaskModel.UseClientPrimaryContactInfo = SavedTask.UseClientPrimaryContactInfo;


            if (SavedTask.DateStart != null || SavedTask.DateStart < tTaskDateStart)
            {
                AddNewHomeTaskModel.DateStart = SavedTask.DateStart.Value;
            }
            else
            {
                AddNewHomeTaskModel.DateStart = tTaskDateStart;
            }

            AddNewHomeTaskModel.EstimatedHours = SavedTask.EstimatedHours;
            AddNewHomeTaskModel.AddressId = SavedTask.AddressId;
            AddNewHomeTaskModel.ContactEmail = SavedTask.ContactEmail;
            AddNewHomeTaskModel.ContactPhoneNumber = SavedTask.ContactPhoneNumber;
            AddNewHomeTaskModel.ContactCountryCodeId = SavedTask.ContactCountryCodeId;

            AddNewHomeTaskModel.Brand = SavedTask.Brand;
            AddNewHomeTaskModel.Model = SavedTask.Model;
            AddNewHomeTaskModel.ProjectId = SavedTask.HomeProjectId;
            AddNewHomeTaskModel.Description = SavedTask.Description;
            AddNewHomeTaskModel.TaskId = SavedTask.Id;


        }
        else
        {
            AddNewHomeTaskModel.Name = TaskCategory.Name;
            AddNewHomeTaskModel.ClientId = ClientAccount.Id;
            AddNewHomeTaskModel.HomeTaskCategoryId = TaskCategory.Id;
            AddNewHomeTaskModel.DateStart = tTaskDateStart;
            AddNewHomeTaskModel.EstimatedHours = TaskCategory.MinHours;
            AddNewHomeTaskModel.UseClientPrimaryAddress = true;
            AddNewHomeTaskModel.UseClientPrimaryContactInfo = true;
            AddNewHomeTaskModel.PriorityId = 3;

            if (!string.IsNullOrWhiteSpace(ProjectId))
            {
                AddNewHomeTaskModel.ProjectId = new Guid(ProjectId);
            }
        }

        HandleTotalPriceCalc();

        ClientAddresses = (await ClientSvc.SelectClientAddresses()).OrderByDescending(q => q.TypeId == 1).ToList();
        if (!ClientAddresses.IsNullOrEmpty())
        {
            AddNewHomeTaskModel.AddressId = ClientAddresses.First().Id;
        }

        //Address


        //HandlePrimaryAddress();


        //FormSetting

        BrandFS = FormSettings.FirstOrDefault(q => string.Equals(q.Type, "Brand", StringComparison.OrdinalIgnoreCase));
        ModelFS = FormSettings.FirstOrDefault(q => string.Equals(q.Type, "Model", StringComparison.OrdinalIgnoreCase));
    }

    async void HandleAddNewHomeTaskModelSubmit()
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var r = await TaskSvc.AddOrUpdateNewTask(AddNewHomeTaskModel);
            if (r.HasValue)
            {
                UriHelper.NavigateTo($"{UrlNameHdr.ClientNewProjectOrders}/{r.Value}", forceLoad: true);
            }
        }

    }



    protected override async Task OnParametersSetAsync()
    {

    }

    void HandleTotalPriceCalc()
    {
        if (AddNewHomeTaskModel.EstimatedHours < TaskCategory.MinHours)
        {
            AddNewHomeTaskModel.EstimatedHours = TaskCategory.MinHours;
        }

        AddNewHomeTaskModel.PriceTotal = AddNewHomeTaskModel.PriceBaseFinal * AddNewHomeTaskModel.EstimatedHours;
        HoursAndMin = TimeSpan.FromHours(Convert.ToDouble(AddNewHomeTaskModel.EstimatedHours));
    }

    async void HandleEstimatePriceChangeChange(UIChangeEventArgs __e)
    {

        AddNewHomeTaskModel.EstimatedHours = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToDecimal(__e.Value.ToString()) : (decimal)0;

        HandleTotalPriceCalc();
        StateHasChanged();

    }

    async void HandleUseClientPrimaryContactInfoChange(UIChangeEventArgs __e)
    {
        AddNewHomeTaskModel.UseClientPrimaryContactInfo = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToBoolean(__e.Value.ToString()) : false;
        StateHasChanged();
    }

    async Task UploadImageFile(UIChangeEventArgs __e, AddImageFileElementModel model)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var files = await fileReaderService.CreateReference(model.Element).EnumerateFilesAsync();
            var file = files.First();
            await model.SetFile(file);
            TaskImages.Add(model);
            StateHasChanged();

            AddImageFileElementModel = new AddImageFileElementModel("newImage");
        }


    }

    async void UploadButtonClick(UIMouseEventArgs e, AddImageFileElementModel model)
    {
        await UiJsHandler.TriggerClientClick(model.ElementId);
        StateHasChanged();
    }





}
