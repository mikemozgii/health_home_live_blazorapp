@page "/contractor/application";

@inject AutoMapper.IMapper _mapper;
@inject IFileReaderService fileReaderService;
@inject HHL.WebApp.Handlers.UiJsHandler UiJsHandler;
@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper;
@inject ContractorApplicationSvc ContractorApplicationSvc;
@inject SessionSvc SessionSvc;
@inject InstantDatahandler InstantDatahandler;
@inject AddressSvc AddressSvc;
@inject ContractorSvc ContractorSvc;
@using System.IO;



    <uContainer AllignCols="center" IsDefault="true" IsFullHeight="true">

        <uCol>
            <uContainer IsDefault="true" CustomClassContainer="mt-25">

                <uCol Grow="1" CustomClass="mx-15">
                    <uContainer>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[0]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[1]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[2]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[3]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[4]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[5]" />
                        </uCol>
                        <uCol Width="135px">
                            <uWizardHeaderItem WizardStepModel="@Tabs[6]" />
                        </uCol>
                        <uCol Width="135px">
                        <uWizardHeaderItem WizardStepModel="@Tabs[7]" />
                       </uCol>
                    </uContainer>

                </uCol>
            </uContainer>

            <uContainer IsDefault="true" CustomClassContainer="mt-35 mb-25">

                <uCol Id="@Tabs[0].ContentId" CustomClass="@Tabs[0].ContentClass">
                    <uContainer AllignCols="center">
                        <uCol>

               
                                <EditForm Model="@ContractorApplicationModel" OnValidSubmit="@HandleContractorApplicationModelSubmit">
                                    <DataAnnotationsValidator />

                                    <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Legal First Name" Id="FirstName">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.FirstName" id="FirstName" class="form-control" Placeholder="John" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.FirstName)" />*@

                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Legal Last Name" Id="LastName">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.LastName" id="LastName" class="form-control" Placeholder="Smith" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.LastName)" />*@

                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Date Of Birth" Id="ContractorDateOfBirth">
                                                <InputCustomDate @bind-Value="ContractorApplicationModel.DateOfBirth" id="ContractorDateOfBirth" class="form-control" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.DateOfBirth)" />*@
                                            </uFormInput>
                                        </uCol>

                                    </uContainer>

                                    <uContainer AllignCols="center" CustomClassContainer="mb-10">

                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Organization Name" Id="OrganizationName">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.OrganizationName" id="OrganizationName" class="form-control" Placeholder="AAA Inc" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.OrganizationName)" />*@

                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Business Number" Id="OrganizationIdentity">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.OrganizationIdentity" id="OrganizationIdentity" class="form-control" Placeholder="123456789" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.OrganizationIdentity)" />*@

                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Tax Number (GST/HST/QST)" Id="OrganizationTaxNumber">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.OrganizationTaxNumber" id="OrganizationTaxNumber" class="form-control" Placeholder="123456789 RT 0001" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.OrganizationTaxNumber)" />*@

                                            </uFormInput>

                                        </uCol>

                                    </uContainer>

                                    <uContainer AllignCols="center" CustomClassContainer="mb-10 mt-10">

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <h5 class="font-weight-normal-bold mb-0">Primary Contact Infomration</h5>

                                        </uCol>

                                    </uContainer>

                                    <uContainer AllignCols="center">

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Email" Id="PrimaryEmailName">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.PrimaryEmailName" id="PrimaryEmailName" class="form-control" Placeholder="example@gmail.com" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.PrimaryEmailName)" />*@
                                            </uFormInput>
                                        </uCol>

                                        <uCol Width="200px" CustomClass="mx-15">
                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Country Code" Id="PhoneCountryCodeId">
                                                <InputCustomSelect bind-Value="@ContractorApplicationModel.PhoneCountryCodeId" id="PhoneCountryCodeId" class="form-control custom-select" Placeholder="+1">
                                                    <option>Select Code </option>
                                                    @foreach (var l in CountryCodeSelectModels)
                                                    {
                                                        <option value="@l.Id">+ @l.PhoneCode @l.Name</option>
                                                    }

                                                </InputCustomSelect>


                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.PhoneCountryCodeId)" />*@

                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Phone Number" Id="PhoneNumber">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.PhoneNumber" id="PhoneNumber" class="form-control" Placeholder="(888) 888-9999" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.PhoneNumber)" />*@

                                            </uFormInput>
                                        </uCol>
                                        @*<uCol Grow="1" CustomClass="mx-15">
                                    <uFormInput IsRequired="true" IsGroup="true" Type="child" Label="Skype" Id="Skype">
                                        <InputCustomText bind-Value="@ContractorApplicationModel.Skype" id="Skype" class="form-control" Placeholder="Skype" />


                                    </uFormInput>
                                </uCol>*@
                                    </uContainer>

                                    <uContainer AllignCols="center" CustomClassContainer="mb-10  mt-10">

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <h5 class="font-weight-normal-bold mb-0">Legal Business Address</h5>

                                        </uCol>

                                    </uContainer>

                                    <uContainer>


                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Street Address 1" Id="Line1">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.Line1" id="Line1" class="form-control" Placeholder="Street and number, P.O. box, c/o." />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.Line1)" />*@

                                            </uFormInput>
                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsGroup="true" Type="child" Label="Street Address 2" Id="Line2">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.Line2" id="Line2" class="form-control" Placeholder="Apartment, suite, unit, building, floor, etc." />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.Line2)" />*@

                                            </uFormInput>
                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="PostalCode" Id="PostalCode">
                                                <InputCustomText bind-Value="@ContractorApplicationModel.PostalCode" id="PostalCode" class="form-control" Placeholder="M3Z 0V6" />
                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.PostalCode)" />*@

                                            </uFormInput>
                                        </uCol>

                                    </uContainer>

                                    <uContainer AllignCols="center" CustomClassContainer="">


                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsGroup="true" Type="child" IsRequired="true" Label="Country" Id="CountryId">
                                                <InputCustomSelect bind-Value="@ContractorApplicationModel.CountryId" OnCustomChange="@(e=>HandleCustomCountryChange(e))" id="CountryId" class="form-control custom-select" Placeholder="United States">
                                                    <option value="">Select Country</option>
                                                    @foreach (var l in CountrySelectModels)
                                                    {
                                                        <option value="@l.Id">@l.Name</option>
                                                    }

                                                </InputCustomSelect>

                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.CountryId)" />*@


                                            </uFormInput>

                                        </uCol>

                                        <uCol Grow="1" CustomClass="mx-15">
                                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="State/Province/Region" Id="RegionId">
                                                <InputCustomSelect bind-Value="@ContractorApplicationModel.RegionId" isDisabled="@(ContractorApplicationModel.CountryId == null)" OnCustomChange="@(e=> HandleCustomRegionChange(e))" id="RegionId" class="form-control custom-select">
                                                    <option value="">Select Region</option>

                                                    @foreach (var l in RegionSelectModels)
                                                    {
                                                        <option value="@l.Id">@l.Name</option>
                                                    }

                                                </InputCustomSelect>


                                                @*<ValidationMessage for="@(()=> ContractorApplicationModel.RegionId)" />*@

                                            </uFormInput>
                                        </uCol>


                                        <uCol Grow="1" CustomClass="mx-15">

                                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" City" Id="CityId">
                                                <InputCustomSelect bind-Value="@ContractorApplicationModel.CityId" isDisabled="@(ContractorApplicationModel.RegionId == null)" id="CityId" class="form-control custom-select">

                                                    <option value="">Select City</option>

                                                    @foreach (var l in CitySelectModels)
                                                    {
                                                        <option value="@l.Id">@l.Name</option>
                                                    }

                                                </InputCustomSelect>

                                            </uFormInput>
                                        </uCol>

                                    </uContainer>

                                    <uContainer IsDefault="true" CustomClassContainer="mb-65">

                                        <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                                            <uButton Type="Submit" IsTransition="false" isSoft="true">
                                                Next
                                            </uButton>

                                        </uCol>
                                    </uContainer>

                                </EditForm>

                            

                        </uCol>
                    </uContainer>
                </uCol>
                <uCol Id="@Tabs[1].ContentId" CustomClass="@Tabs[1].ContentClass">
                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="2" CustomClass="mx-15">
                                    <h6 class="font-weight-normal-bold">Upload a current (non-expired) document from the list below to verify your Identity</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Driver's Licence or equivalent</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Passport</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Residency card</h6>
                                </uCol>
                                <uCol Grow="1" CustomClass="mx-15" CustomStyle="text-align:right">

                                    <img style="max-height:140px" src="/img/driverslicence.jpeg" />
                                </uCol>
                            </uContainer>
                        </uCol>
                    </uContainer>

                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="1" CustomClass="mx-15" IsTextCenter="true">

                                    <input type="file" onchange="@(e=> UploadImageFile(e, IdentityImage))" ref="IdentityImage.Element" id="IdentityfileUpload" style="visibility: hidden; position:absolute; z-index:-100;" />

                                    @if (IdentityImage.IsFileUploaded)
                                    {
                                        <div class="u-dropzone py-20">
                                            <img src="@IdentityImage.FileUploadImageData" style="max-height: 190px; border-radius: 5px;" />

                                        </div>


                                        <div class="mt-15">

                                            <uButton Size="btn-sm" isSoft="true" Color="green" CustomOnClickv2="@(e=> UploadButtonClick(e, IdentityImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="upload" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>

                                            <uButton Size="btn-sm" isSoft="true" Color="red" CustomOnClickv2="@(e=>DeleteUploadFile(e,IdentityImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="trash" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>
                                        </div>
                                    }
                                    else
                                    {
                                        @if (IdentityImage.FileReference != null && !IdentityImage.IsFileSizeValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">File size must be less than  10MB</div>
                                        }
                                        @if (IdentityImage.FileReference != null && !IdentityImage.IsExtensionValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">This file type is not supported. Allowed File Types: @(String.Join(", ", IdentityImage.AllowableExtensions))</div>
                                        }
                                        <uFileUploadArea CustomOnClickv2="@(e=> UploadButtonClick(e, IdentityImage))" />
                                    }


                                </uCol>

                            </uContainer>

                            <uContainer IsDefault="true" CustomClassContainer="mb-65">
                                <uCol Grow="1" CustomClass="mx-15">

                                    <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 0))" IsTransition="false" isSoft="true">
                                        Back
                                    </uButton>

                                </uCol>
                                <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">


                                    @if (IdentityImage.FileReference != null && IdentityImage.IsExtensionValid)
                                    {
                                        <uButton CustomOnClickv2="@(e=> SaveFileToContractor(e, IdentityImage))" IsTransition="false" isSoft="true">
                                            Next
                                        </uButton>
                                    }



                                </uCol>
                            </uContainer>


                        </uCol>
                    </uContainer>
                </uCol>
                <uCol Id="@Tabs[2].ContentId" CustomClass="@Tabs[2].ContentClass">
                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="2" CustomClass="mx-15">
                                    <h6 class="font-weight-normal-bold">Upload a current (non-expired) document from the list below to verify that you can legally work as an independent contractor in Canada</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Passport</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Birth certificate</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Citizenship card</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Work permit</h6>
                                </uCol>
                                <uCol Grow="1" CustomClass="mx-15" CustomStyle="text-align:right">

                                    <img style="max-height:140px" src="/img/candaPassport.jpeg" />
                                </uCol>
                            </uContainer>
                        </uCol>
                    </uContainer>

                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="1" CustomClass="mx-15" IsTextCenter="true">
                                    <input type="file" onchange="@(e=> UploadImageFile(e, WorkAuthorizationImage))" ref="WorkAuthorizationImage.Element" id="WorkAuthorizationfileUpload" style="visibility: hidden; position:absolute; z-index:-100;" />

                                    @if (WorkAuthorizationImage.IsFileUploaded)
                                    {
                                        <div class="u-dropzone py-20">
                                            <img src="@WorkAuthorizationImage.FileUploadImageData" style="max-height: 190px; border-radius: 5px;" />

                                        </div>


                                        <div class="mt-15">

                                            <uButton Size="btn-sm" isSoft="true" Color="green" CustomOnClickv2="@(e=> UploadButtonClick(e, WorkAuthorizationImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="upload" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>

                                            <uButton Size="btn-sm" isSoft="true" Color="red" CustomOnClickv2="@(e=>DeleteUploadFile(e,WorkAuthorizationImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="trash" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>
                                        </div>
                                    }
                                    else
                                    {
                                        @if (WorkAuthorizationImage.FileReference != null && !WorkAuthorizationImage.IsFileSizeValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">File size must be less than  10MB</div>
                                        }
                                        @if (WorkAuthorizationImage.FileReference != null && !WorkAuthorizationImage.IsExtensionValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">This file type is not supported. Allowed File Types: @(String.Join(", ", WorkAuthorizationImage.AllowableExtensions))</div>
                                        }
                                        <uFileUploadArea CustomOnClickv2="@(e=> UploadButtonClick(e, WorkAuthorizationImage))" />
                                    }
                                </uCol>

                            </uContainer>
                        </uCol>
                    </uContainer>


                    <uContainer IsDefault="true" CustomClassContainer="mb-65">
                        <uCol Grow="1" CustomClass="mx-15">

                            <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 1))" IsTransition="false" isSoft="true">
                                Back
                            </uButton>

                        </uCol>
                        <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                    
                                <uButton CustomOnClickv2="@(e=> SaveFileToContractor(e, WorkAuthorizationImage))" IsTransition="false" isSoft="true">
                                    Next
                                </uButton>

                         


                        </uCol>
                    </uContainer>


                </uCol>
                <uCol Id="@Tabs[3].ContentId" CustomClass="@Tabs[3].ContentClass">
                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="2" CustomClass="mx-15">
                                    <h6 class="font-weight-normal-bold">Clients will use this photo to identify you. Looking friendly makes a great impression. Photo requirements:</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Show your whole face and tops of your shoulders</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Take your sunglasses and hat off</h6>
                                    <h6><span class="font-size-18 mr-5">&#8226;</span> Take your photo in a well-lit place</h6>
                                </uCol>
                                <uCol Grow="1" CustomClass="mx-15" CustomStyle="text-align:right">

                                    <img style="max-height:140px; border-radius: 5px" src="/img/profilephoto.jpg" />
                                </uCol>
                            </uContainer>
                        </uCol>
                    </uContainer>

                    <uContainer AllignCols="center">
                        <uCol>
                            <uContainer AllignCols="center" CustomClassContainer="mb-15">

                                <uCol Grow="1" CustomClass="mx-15" IsTextCenter="true">
                                    <input type="file" onchange="@(e=> UploadImageFile(e, PhotoImage))" ref="PhotoImage.Element" id="PhotofileUpload" style="visibility: hidden; position:absolute; z-index:-100;" />

                                    @if (PhotoImage.IsFileUploaded)
                                    {
                                        <div class="u-dropzone py-20">
                                            <img src="@PhotoImage.FileUploadImageData" style="max-height: 190px; border-radius: 5px;" />

                                        </div>


                                        <div class="mt-15">

                                            <uButton Size="btn-sm" isSoft="true" Color="green" CustomOnClickv2="@(e=> UploadButtonClick(e, PhotoImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="upload" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>

                                            <uButton Size="btn-sm" isSoft="true" Color="red" CustomOnClickv2="@(e=>DeleteUploadFile(e,PhotoImage))">
                                                <uFontAwesomeIcon Thickness="s" Icon="trash" Size="14px"> </uFontAwesomeIcon>
                                            </uButton>
                                        </div>
                                    }
                                    else
                                    {
                                        @if (PhotoImage.FileReference != null && !PhotoImage.IsFileSizeValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">File size must be less than  10MB</div>
                                        }
                                        @if (PhotoImage.FileReference != null && !PhotoImage.IsExtensionValid)
                                        {
                                            <div class="font-red mb-5" style="text-align:left;">This file type is not supported. Allowed File Types: @(String.Join(", ", PhotoImage.AllowableExtensions))</div>
                                        }
                                        <uFileUploadArea CustomOnClickv2="@(e=> UploadButtonClick(e, PhotoImage))" />
                                    }
                                </uCol>

                            </uContainer>
                        </uCol>
                    </uContainer>


                    <uContainer IsDefault="true" CustomClassContainer="mb-65">
                        <uCol Grow="1" CustomClass="mx-15">

                            <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 2))" IsTransition="false" isSoft="true">
                                Back
                            </uButton>

                        </uCol>
                        <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                            <uButton CustomOnClickv2="@(e=> SaveFileToContractor(e, PhotoImage))" IsTransition="false" isSoft="true">
                                Next
                            </uButton>

                        </uCol>
                    </uContainer>
                </uCol>
                <uCol Id="@Tabs[4].ContentId" CustomClass="@Tabs[4].ContentClass">
                    <uContainer AllignCols="center" CustomClassContainer="mb-20">
                        <uCol Grow="1" CustomClass="mx-15">
                            <uPlanCard Title="@($"{BasicPlan.Name} Plan")" Price="@BasicPlan.PriceMontly" Color="silverish" PriceDiscounted="@BasicPlan.PriceMonthlyDiscounted" Items="@BasicPlanItems" CustomOnClickv2="@(e=> SelectPlan(e, BasicPlan))" />
                        </uCol>
                        <uCol Grow="1" CustomClass="mx-15">
                            <uPlanCard Title="@($"{PremiumPlan.Name} Plan")" Price="@PremiumPlan.PriceMontly" Color="blue" PriceDiscounted="@PremiumPlan.PriceMonthlyDiscounted" Items="@PremiumPlanItems" CustomOnClickv2="@(e=> SelectPlan(e, PremiumPlan))" />
                        </uCol>
                        <uCol Grow="1" CustomClass="mx-15">
                            <uPlanCard Title="@($"{UnlimitedPlan.Name} Plan")" Price="@UnlimitedPlan.PriceMontly" Color="green" PriceDiscounted="@UnlimitedPlan.PriceMonthlyDiscounted" Items="@UnlimitedPlanItems" CustomOnClickv2="@(e=> SelectPlan(e, UnlimitedPlan))" />
                        </uCol>
                    </uContainer>

                    <uContainer IsDefault="true">

                        <uCol Grow="1" CustomClass="mx-15">

                            <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 3))" IsTransition="false" isSoft="true">
                                Back
                            </uButton>

                        </uCol>

                    </uContainer>
                </uCol>


                <uCol Id="@Tabs[5].ContentId" CustomClass="@Tabs[5].ContentClass">

                    @if (!ContractorAddresses.IsNullOrEmpty())
                    {

                        <uContainer CustomClassContainer="mb-20">


                            @foreach (var addres in ContractorAddresses)
                            {
                                <uCol Width="200px" CustomClass="mx-15 mt-15">
                                    <div class="card px-15 py-15">

                                        <div class="font-size-11 font-green">

                                            <uContainer>

                                                <uCol Grow="1">

                                                    @addres.AreaKm km
                                                </uCol>

                                                <uCol Grow="1" CustomStyle="text-align:right">

                                                    <uButton isSoft="true" Size="btn-xs" CustomStyle="" Color="blue" CustomClass="px-0 py-0 btn-bg-transparent" CustomOnClickv2="@(e => EditAddress(e, addres.Id))"> <uFontAwesomeIcon Thickness="s" Size="12px" Icon="pencil" CustomClass="mr-5" /></uButton>
                                                    <uButton isSoft="true" Size="btn-xs" CustomStyle="" Color="red" CustomClass="px-0 py-0 ml-5 btn-bg-transparent" CustomOnClickv2="@(e => DeleteAddress(e, addres.Id))"> <uFontAwesomeIcon Thickness="s" Icon="trash" Size="12px" CustomClass="mr-5" /> </uButton>
                                                </uCol>

                                            </uContainer>

                                        </div>

                                        <div class="font-size-13 font-weight-normal-bold">@addres.Name</div>
                                        <div class="font-size-13">@addres.CityName</div>
                                        <div class="font-size-13">@addres.CountryName , @addres.RegionName</div>



                                    </div>
                                </uCol>
                            }



                            @if (ContractorAddresses.Count() <= SelectedPlan.LocationLimitCount)
                            {

                                <uCol Width="145px" CustomClass="mx-15 mt-15">



                                    <uButton IsSoft="true" Color="grain" CustomOnClickv2="@(e => AddAddress(e))" CustomStyle="width:100%;height:100%">
                                        <div>
                                            <uFontAwesomeIcon Thickness="s" Size="14px" Icon="plus" />
                                        </div>
                                        <div class="pb-2">
                                            Add
                                        </div>



                                    </uButton>

                                </uCol>
                            }





                        </uContainer>

                        <uContainer IsDefault="true" CustomClassContainer="mb-65">

                            <uCol Grow="1" CustomClass="mx-15">

                                <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 4))" IsTransition="false" isSoft="true">
                                    Back
                                </uButton>

                            </uCol>

                            <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                                <uButton CustomOnClickv2="@(e=> SaveContractorLocations(e))" IsTransition="false" isSoft="true">
                                    Next
                                </uButton>

                            </uCol>
                        </uContainer>
                    }
                    else
                    {
                        <div class="text-center">

                            <h3 class="my-25"> Please add a Location where you are planning to operate</h3>

                            <uButton IsTransition="false" IsSoft="true" Color="grain" CustomOnClickv2="@(e=> AddAddress(e))">
                                <uFontAwesomeIcon Thickness="s" Size="14px" Icon="plus" CustomClass="mr-5" /> Add a Service Location
                            </uButton>
                        </div>


                    }





                </uCol>
                <uCol Id="@Tabs[6].ContentId" CustomClass="@Tabs[6].ContentClass">
                    <uContainer AllignCols="center" CustomClassContainer="mb-20">

                        <uCol Grow="1" CustomClass="mx-15">


                            @if (!ContractorServices.IsNullOrEmpty())
                            {

                                <uContainer>

                                    <uCol Grow="1" CustomClass="mx-15">

                                        <uTable Items="@ContractorServices.ToList()" Context="ContractorService" TItem="e_Contractor_Service">
                                            <TableHeader>
                                                <th>Name</th>
                                                <th>Action</th>
                                                <th>Bulding</th>
                                                <th>Custom</th>
                                                <th>Default</th>
                                                <th style="padding-bottom:3px; padding-right:0px; text-align:right">
                                                    <uButton Size="btn-xs" IsSoft="true" IsTransition="false" Color="grain" CustomOnClickv2="@(e => AddService(e))">
                                                        <uFontAwesomeIcon Size="11px" Icon="plus" CustomClass="mr-3" /> Add Service
                                                    </uButton>
                                                </th>
                                            </TableHeader>
                                            <RowTemplate>

                                                @{
                                                    var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == ContractorService.ServiceId);
                                                    var homeTaskAction = InstantDatahandler.All_HomeTaskServiceTypes.First(q => q.Id == homeTaskCategory.HomeTaskServiceTypeId);
                                                    var homeTaskItem = InstantDatahandler.All_HomeTaskTypes.First(q => q.Id == homeTaskCategory.HomeTaskTypeId);
                                                }
                                                <td>@(homeTaskItem.Name)</td>
                                                <td><uHomeTaskActionView Id="@homeTaskCategory.HomeTaskServiceTypeId" /></td>
                                                <td><uBuldingTypeView IconSize="14px" Value="@homeTaskCategory.HomeBuldingTypeId" /></td>

                                                @if (ContractorService.IsCustomPrice)
                                                {
                                                    <td>$ @(((decimal)(ContractorService.PricePerHour)).ToString("#.00")) <span class="font-size-11">/hr</span></td>
                                                }
                                                else
                                                {
                                                    <td>-</td>

                                                }

                                                <td>$ @($"{((decimal)(HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier)).ToString("#.00")}") <span class="font-size-11">/hr</span></td>

                                                <td style="text-align: right">
                                                    <uButton isSoft="true" Size="btn-xs" Color="blue" CustomClass="px-0 py-0 btn-bg-transparent" CustomOnClickv2="@(e => EditService(e, ContractorService.Id))"> <uFontAwesomeIcon Thickness="s" Size="12px" Icon="pencil" CustomClass="mr-10" /></uButton>
                                                    <uButton Size="btn-xs" Color="red" isSoft="true" CustomClass="btn-bg-transparent px-0 py-0" CustomOnClickv2="@(e => DeleteService(e, ContractorService.Id))"> <uFontAwesomeIcon Thickness="s" Size="14px" Icon="trash" /> </uButton>
                                                </td>

                                            </RowTemplate>
                                        </uTable>

                                    </uCol>
                                </uContainer>




                                <uContainer IsDefault="true" CustomClassContainer="mb-65">

                                    <uCol Grow="1" CustomClass="mx-15">

                                        <uButton CustomOnClickv2="@(e=> HandleStepBack(e, 5))" IsTransition="false" isSoft="true">
                                            Back
                                        </uButton>

                                    </uCol>

                                    <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                                        <uButton CustomOnClickv2="@(e=> SaveContractorServices(e))" IsTransition="false" isSoft="true">
                                            Next
                                        </uButton>

                                    </uCol>
                                </uContainer>

                            }

                            else
                            {


                                <div class="text-center">

                                    <h3 class="my-25"> Please add your Services</h3>

                                    <uButton IsTransition="false" IsSoft="true" Color="grain" CustomOnClickv2="@(e=> AddService(e))">
                                        <uFontAwesomeIcon Thickness="s" Size="14px" Icon="plus" CustomClass="mr-5" /> Add a Service
                                    </uButton>
                                </div>
                            }


                        </uCol>



                    </uContainer>


                </uCol>
                <uCol Id="@Tabs[7].ContentId" CustomClass="@Tabs[7].ContentClass">
                    <uContainer AllignCols="center">
                        <uCol>

                            <CascadingValue Value="@AddSheduleFormModel">
                                <uAddSchedule />
                            </CascadingValue>

                        </uCol>
                    </uContainer>

                    <uContainer IsDefault="true" CustomClassContainer="mb-65">

                        <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                            <uButton CustomOnClickv2="@(e=> SaveContractorSchedule(e))" IsTransition="false" isSoft="true">
                                Submit Application
                            </uButton>

                        </uCol>
                    </uContainer>
                </uCol>
   
              

            </uContainer>

            <uContainer IsDefault="true" CustomClassContainer="mb-65">

                <uCol Grow="1" CustomStyle="text-align:right" CustomClass="mx-15">

                    @{

                        var tab = Tabs.FirstOrDefault(q => q.IsActive);
                    }


                    @if (tab != null && !tab.Name.Contains("Select Plan") && !tab.Name.Contains("Legal Info"))
                    {


                        @*@if (Tabs.Where(q => q.IsPass).Any())
                    {

                        <uButton IsTransition="false" isSoft="true" CustomOnClickv2="@(e=>HandleStepBack())">
                            Start Over
                        </uButton>
                    }*@

                        @*<uButton IsTransition="false" isSoft="true" CustomOnClickv2="@(e=>HandleStepNext())">
                        Next
                    </uButton>*@
                    }


                </uCol>
            </uContainer>
        </uCol>

    </uContainer>




<CascadingValue Value="@ModalSeetings">
    <uModal Id="MyccdddModal" Title="Add Service Location" ContainerStyle="max-width:500px" WrapStyle="padding-top:50px">

        <EditForm Model="@AddEditContractorLocationFormModel" OnValidSubmit="@HandleAddEditContractorLocationFormModelSubmit">
            <DataAnnotationsValidator />

            <uContainer AllignCols="center" CustomClassContainer="">


                <uCol CustomClass="mx-15">
                    <uFormInput IsGroup="true" Type="child" IsRequired="true" Label="Name" Id="Name">
                        <InputCustomText bind-Value="@AddEditContractorLocationFormModel.Name" id="Name" class="form-control" Placeholder="Location Name" />
                    </uFormInput>
                </uCol>


                <uCol CustomClass="mx-15">

                    <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" Country" Id="CountryId">
                        <InputCustomSelect bind-Value="@AddEditContractorLocationFormModel.CountryId" id="CountryId" OnCustomChange="@(e=> HandleCustomCountryChange_Location(e))" class="form-control custom-select">
                            <option value="">Select Country</option>
                            @foreach (var l in CountrySelectModels)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }

                        </InputCustomSelect>
                    </uFormInput>
                </uCol>

                <uCol>
                    <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" State/Province/Region" Id="RegionId">
                        <InputCustomSelect bind-Value="@AddEditContractorLocationFormModel.RegionId" isDisabled="@(AddEditContractorLocationFormModel.CountryId == null)" OnCustomChange="@(e=> HandleCustomRegionChange_Location(e))" id="RegionId" class="form-control custom-select">
                            <option value="">Select Region</option>

                            @foreach (var l in LocationRegionSelectModels)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }

                        </InputCustomSelect>

                    </uFormInput>
                </uCol>


                <uCol Grow="1">
                    <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" City" Id="CityId">
                        <InputCustomSelect bind-Value="@AddEditContractorLocationFormModel.CityId" isDisabled="@(AddEditContractorLocationFormModel.RegionId == null)" id="CityId" class="form-control custom-select">

                            <option value="">Select City</option>

                            @foreach (var l in LocationCitySelectModels)
                            {
                                <option value="@l.Id">@l.Name</option>
                            }

                        </InputCustomSelect>

                    </uFormInput>
                </uCol>


                @*<uCol CustomClass="mx-15">
            <uFormInput IsGroup="true" Type="child" IsRequired="true" Label="Postal Code" Id="PostalCode">
                <InputCustomText bind-Value="@AddEditContractorLocationFormModel.PostalCode" id="PostalCode" class="form-control" Placeholder="Enter valid Zip code" />
            </uFormInput>
        </uCol>*@


                <uCol CustomClass="mx-15">
                    <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Area Covered" Id="@($"AreaCovered")">
                        <InputCustomSelect bind-Value="@AddEditContractorLocationFormModel.AreaKm" id="@($"AreaCovered")" class="form-control custom-select" Placeholder="100km">
                            @foreach (var l in InstantDatahandler.All_AreaKms)
                            {
                                <option value="@l.Value">@l.Name</option>
                            }

                        </InputCustomSelect>
                    </uFormInput>
                </uCol>
                <uCol CustomClass="mx-15" CustomStyle="text-align:right">

                    <uButton Type="Submbit" Title="Save" />

                </uCol>
            </uContainer>


        </EditForm>


    </uModal>
</CascadingValue>

<CascadingValue Value="@ServiceModalSeetings">
    <uModal Id="AddContractorService" Title="Select Services" ContainerStyle="max-width:500px">

        <EditForm Model="@EditContractorServiceFormModel" OnValidSubmit="@HandleEditContractorServiceFormModelSubmit">
            <DataAnnotationsValidator />

            <uContainer AllignCols="center" CustomClassContainer="">

                @if (EditContractorServiceFormModel.Id.HasValue)
                {
                    <uCol>

                        <uContainer>

                            <uCol Grow="1" AlignCol="center">

                                <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Price per Hour" Id="PriceperHour">

                                    <InputCustomNumber IsDisabled="@(!EditContractorServiceFormModel.IsCustomPrice)" bind-Value="@EditContractorServiceFormModel.Price" id="PriceperHour" class="form-control" Step="0.25" />

                                </uFormInput>
                            </uCol>

                            <uCol Grow="1" AlignCol="center" CustomClass="mx-15">
                                <uCheckbox IsForm="true" Title="Custom Price" Id="CustomPrice">
                                    <InputCustomCheckbox bind-Value="@EditContractorServiceFormModel.IsCustomPrice" OnCustomChange="@HandleIsCustomPriceChange" IsCustomChecked="@EditContractorServiceFormModel.IsCustomPrice" class="custom-control-input custom-control-input-notshadowfocus" id="CustomPrice" />
                                </uCheckbox>
                            </uCol>
                        </uContainer>

                    </uCol>


                    <uCol CustomClass="mx-15" CustomStyle="text-align:right">

                        <uButton Type="Submbit" Title="Save" />

                    </uCol>

                }
                else
                {

                    <uCol CustomClass="mx-15">
                        <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" Product Type" Id="ProductTypeId">
                            <InputCustomSelect bind-Value="@EditContractorServiceFormModel.ProductTypeId" id="ProductTypeId" class="form-control custom-select">

                                @if (EditContractorServiceFormModel.ProductTypeId == null)
                                {
                                    <option value="">Select Product Type</option>
                                }



                                @foreach (var l in InstantDatahandler.All_ProductTypes)
                                {
                                    <option value="@l.Id">@l.Name</option>
                                }

                            </InputCustomSelect>
                        </uFormInput>
                    </uCol>

                    @if (EditContractorServiceFormModel.ProductTypeId == 1)
                    {




                        <uCol CustomClass="mx-15">
                            <uFormInput IsGroup="true" IsRequired="true" Type="child" Label=" Bulding Type" Id="BuldingTypeId">
                                <InputCustomSelect bind-Value="@EditContractorServiceFormModel.BuldingTypeId" id="BuldingTypeId" OnCustomChange="@(e=> HandleCustomBuldingTypeChange(e))" class="form-control custom-select">

                                    @if (EditContractorServiceFormModel.BuldingTypeId == null)
                                    {
                                        <option value="">Select Bulding Types</option>
                                    }


                                    @foreach (var l in InstantDatahandler.All_BuldingTypes)
                                    {
                                        <option value="@l.Id">@l.Name</option>
                                    }

                                </InputCustomSelect>
                            </uFormInput>
                        </uCol>

                        @if (EditContractorServiceFormModel.BuldingTypeId != null)
                        {

                            <uCol>
                                <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Services" Id="ServiceId">
                                    <InputCustomSelect bind-Value="@EditContractorServiceFormModel.ServiceId" isDisabled="@(EditContractorServiceFormModel.BuldingTypeId == null)" OnCustomChange="@(e=> HandleCustomServiceChange(e))" id="ServiceId" class="form-control custom-select">

                                        @if (EditContractorServiceFormModel.ServiceId == null)
                                        {
                                            <option value="">Select Service</option>
                                        }



                                        @foreach (var l in ServiceSelectModels)
                                        {
                                            <option value="@l.Id">@l.Name</option>
                                        }

                                    </InputCustomSelect>

                                </uFormInput>
                            </uCol>
                        }


                        @if (EditContractorServiceFormModel.ServiceId != null)
                        {

                            <uCol>

                                <uContainer>

                                    <uCol Grow="1" AlignCol="center">

                                        <uFormInput IsGroup="true" IsRequired="true" Type="child" Label="Price per Hour" Id="PriceperHour">

                                            <InputCustomNumber IsDisabled="@(!EditContractorServiceFormModel.IsCustomPrice)" bind-Value="@EditContractorServiceFormModel.Price" id="PriceperHour" class="form-control" Step="0.25" />

                                        </uFormInput>
                                    </uCol>

                                    <uCol Grow="1" AlignCol="center" CustomClass="mx-15">
                                        <uCheckbox IsForm="true" Title="Custom Price" Id="CustomPrice">
                                            <InputCustomCheckbox bind-Value="@EditContractorServiceFormModel.IsCustomPrice" OnCustomChange="@HandleIsCustomPriceChange" IsCustomChecked="@EditContractorServiceFormModel.IsCustomPrice" class="custom-control-input custom-control-input-notshadowfocus" id="CustomPrice" />
                                        </uCheckbox>
                                    </uCol>
                                </uContainer>

                            </uCol>


                            <uCol CustomClass="mx-15" CustomStyle="text-align:right">

                                <uButton Type="Submbit" Title="Save" />

                            </uCol>
                        }








                    }
                    else if (EditContractorServiceFormModel.ProductTypeId == 2)
                    {

                        <uCol CustomClass="mx-15" IsTextCenter="true">

                            <h6 class="font-red"> Heath services are not available, please check later </h6>

                        </uCol>
                    }
                    else if (EditContractorServiceFormModel.ProductTypeId == 3)
                    {


                        <uCol CustomClass="mx-15" IsTextCenter="true">

                            <h6 class="font-red"> Life services are not available, please check later </h6>

                        </uCol>

                    }

                }




            </uContainer>


        </EditForm>


    </uModal>
</CascadingValue>

@functions {

    ModalSeetings ModalSeetings { get; set; } = new ModalSeetings() { ShowModal = false };
    ModalSeetings ServiceModalSeetings { get; set; } = new ModalSeetings() { ShowModal = false };
    AddEditContractorLocationFormModel AddEditContractorLocationFormModel { get; set; } = new AddEditContractorLocationFormModel();
    EditContractorServiceFormModel EditContractorServiceFormModel { get; set; } = new EditContractorServiceFormModel();
    List<v_Address> ContractorAddresses { get; set; } = new List<v_Address>();
    IEnumerable<CountryCodeSelectModel> CountryCodeSelectModels;
    public List<WizardStepModel> Tabs;
    [Parameter]
    private bool isLoading { get; set; } = false;
    IEnumerable<CountrySelectModel> CountrySelectModels { get; set; } = Enumerable.Empty<CountrySelectModel>();
    IEnumerable<RegionSelectModel> RegionSelectModels { get; set; } = Enumerable.Empty<RegionSelectModel>();
    IEnumerable<CitySelectModel> CitySelectModels { get; set; } = Enumerable.Empty<CitySelectModel>();

    IEnumerable<RegionSelectModel> LocationRegionSelectModels { get; set; } = Enumerable.Empty<RegionSelectModel>();
    IEnumerable<CitySelectModel> LocationCitySelectModels { get; set; } = Enumerable.Empty<CitySelectModel>();

    IEnumerable<ServiceSelectModel> ServiceSelectModels = new List<ServiceSelectModel>();
    IEnumerable<e_Contractor_Service> ContractorServices = new List<e_Contractor_Service>();
    ContractorApplicationModel ContractorApplicationModel;
    Guid? ContractorPrimaryInfoPhoneId;

    e_ContractorPlan BasicPlan;
    IEnumerable<string> BasicPlanItems;
    e_ContractorPlan PremiumPlan;
    IEnumerable<string> PremiumPlanItems;
    e_ContractorPlan UnlimitedPlan;
    IEnumerable<string> UnlimitedPlanItems;

    e_ContractorPlan SelectedPlan;

    [Parameter]
    e_Contractor ContractorEntity { get; set; }

    public string IdentityinputElementId { get; set; } = "IdentityfileUpload";
    AddImageFileElementModel IdentityImage { get; set; } = new AddImageFileElementModel("IdentityfileUpload");

    public string WorkAuthorizationElementId { get; set; } = "WorkAuthorizationfileUpload";
    AddImageFileElementModel WorkAuthorizationImage { get; set; } = new AddImageFileElementModel("WorkAuthorizationfileUpload");

    public string PhotoElementId { get; set; } = "PhotofileUpload";
    AddImageFileElementModel PhotoImage { get; set; } = new AddImageFileElementModel("PhotofileUpload");

    //string IdentityinputElementId = "IdentityfileUpload";
    //ElementRef IdentityinputElement;
    //bool IsIdentityFileUploaded;
    //string IdentityFileUploadImageDate = String.Empty;
    //string IdentityFileUploadImageDate = String.Empty;


    public List<v_Address> Locations { get; set; }
    public AddSheduleFormModel AddSheduleFormModel { get; set; }



    protected override async Task OnInitializedAsync()
    {




        BasicPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 1);
        BasicPlanItems = new List<string>() {
            $"For Casual, Part-Time, Seasonal work",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"{BasicPlan.ServiceCategoryCount} Category",
            $"Limited to {BasicPlan.LocationLimitCount} Locations",
            $"Limited to {BasicPlan.TaskLimitCount} Tasks or  ${BasicPlan.BudgetLimitation.ToString("##")} per Day",
            "-No Review Verification",
            "-Not available for Search",


        };
        PremiumPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 2);
        PremiumPlanItems = new List<string>() {
            $"For Full-Time day-to-day service",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"Limited to {PremiumPlan.ServiceCategoryCount} Categories",
            $"Limited to {PremiumPlan.LocationLimitCount} Locations",
            $"Limited to {PremiumPlan.TaskLimitCount} Tasks or ${PremiumPlan.BudgetLimitation.ToString("##")} per Day",
            $"Limited Review Verification",
            "-Not available For SEO (Google, Adwords)",


        };
        UnlimitedPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 3);
        UnlimitedPlanItems = new List<string>() {
            $"For Advanced Buisinesses",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"Unlimited Service Types and Categories",
            $"Unlimited Locations",
            $"Unlimited Tasks and Orders per Day",
            "Full Review Verification",
            "Full SEO (Google, Adword and etc.)",

        };


        CountryCodeSelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountryCodeSelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        ContractorApplicationModel = new ContractorApplicationModel();
        Locations = new List<v_Address>();

        Tabs = new List<WizardStepModel>()
{

        new WizardStepModel("Legal Info", "building"),
        new WizardStepModel("Identity", "fingerprint"),
        new WizardStepModel("Work Authorization", "id-card"),
        new WizardStepModel("Photo", "user"),
        new WizardStepModel("Select Plan", "tasks"),
        new WizardStepModel("Locations", "map-marker"),
        new WizardStepModel("Services", "tools"),
        new WizardStepModel("Schedule", "clock"),
        //new WizardStepModel("Review", "file-alt"),
        };



        var tempAddSheduleShiftModel1 = new AddSheduleShiftModel() { TimeStart = TimeSpan.FromHours(8), TimeEnd = TimeSpan.FromHours(12) };
        var tempAddSheduleShiftModel2 = new AddSheduleShiftModel() { TimeStart = TimeSpan.FromHours(13), TimeEnd = TimeSpan.FromHours(17) };
        AddSheduleFormModel = new AddSheduleFormModel();
        AddSheduleFormModel.Days = new List<AddSheduleDayModel>();
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Monday", Id=1, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Tuesday", Id=2, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Wednesday", Id=3, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Thursday", Id=4, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Friday", Id=5, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Saturday", Id=6, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Sunday", Id=7, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() });
        AddSheduleFormModel.ExclusionDays = new List<AddScheduleExclusionDay>();
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Good Friday", IsAllDay = true, Date = new DateTime(2019, 04, 19), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Victoria Day", IsAllDay = true, Date = new DateTime(2019, 05, 20), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Canada Day", IsAllDay = true, Date = new DateTime(2019, 07, 01), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Thanksgiving Day", IsAllDay = true, Date = new DateTime(2019, 10, 14), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Remembrance Day", IsAllDay = true, Date = new DateTime(2019, 11, 11), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Christmas Day", IsAllDay = true, Date = new DateTime(2019, 12, 26), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Boxing Day", IsAllDay = true, Date = new DateTime(2019, 12, 26), IsStatHoliday = true });


        ContractorEntity = (await ContractorApplicationSvc._HHLQueryExecutionSvc.GetByAccountIdFromSessionAsync<e_Contractor>()).FirstOrDefault;

        //Application is Complete and waiting for Review
        if (ContractorEntity != null && ContractorEntity.ContractorStatusId != (int)ContractorStatus.ApplicationInProgress)
        {
            UriHelper.NavigateTo($"/contractor/identity-verification", forceLoad: true);
        }

        //IdentityImage = new AddImageFileElementModel(IdentityinputElementId);
        //WorkAuthorizationImage = new AddImageFileElementModel(WorkAuthorizationElementId);
        //PhotoImage = new AddImageFileElementModel(PhotoElementId);




        


        if (ContractorEntity != null)
        {
             var r = await ContractorSvc.SelectCurrent_EditView();
            ContractorApplicationModel.Id = r.Id;
            ContractorApplicationModel.FirstName = r.FirstName;
            ContractorApplicationModel.LastName = r.LastName;
            ContractorApplicationModel.OrganizationName = r.OrganizationName;
            ContractorApplicationModel.OrganizationIdentity = r.OrganizationIdentity;
            ContractorApplicationModel.OrganizationTaxNumber = r.OrganizationTaxNumber;
            ContractorApplicationModel.DateOfBirth = r.DateOfBirth;
            ContractorApplicationModel.PrimaryAddressId = r.PrimaryAddressId;
            ContractorApplicationModel.PrimaryEmailId = r.PrimaryEmailId;
            ContractorApplicationModel.PrimaryPhoneId = r.PrimaryPhoneId;
            ContractorApplicationModel.PrimaryEmailName = r.PrimaryEmailName;
            ContractorApplicationModel.PhoneCountryCodeId = r.PhoneCountryCodeId;
            ContractorApplicationModel.PhoneNumber = r.PhoneNumber;
            ContractorApplicationModel.CityId = r.PrimaryAddressCityId;
            ContractorApplicationModel.CountryId = r.PrimaryAddressCountryId;
            ContractorApplicationModel.RegionId = r.PrimaryAddressRegionId;
            ContractorApplicationModel.PostalCode = r.PrimaryAddressPostalCode;
            ContractorApplicationModel.Line1 = r.PrimaryAddressLine1;
            ContractorApplicationModel.Line2 = r.PrimaryAddressLine2;

            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == ContractorApplicationModel.CountryId)).OrderBy(q => q.Name);
            CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == ContractorApplicationModel.RegionId)).OrderBy(q => q.Name);
        }


        if (ContractorEntity != null)
        {
            Tabs[(int)ContractorEntity.ApplicationStep].IsActive = true;
            Tabs[(int)ContractorEntity.ApplicationStep].ProcessTab();
            for (var i = 0; i < ContractorEntity.ApplicationStep; i++)
            {
                Tabs[i].IsPass = true;
                Tabs[i].ProcessTab();
            }

        }
        else
        {
            Tabs[0].IsActive = true;
            Tabs[0].ProcessTab();
        }



        if (ContractorEntity != null)
        {
            await FillContractorAddresses();
            await LoadServicesData();
            if (ContractorEntity.ContractorPlanId == 1)
            {
                SelectedPlan = BasicPlan;
            }
            else if (ContractorEntity.ContractorPlanId == 2)
            {
                SelectedPlan = PremiumPlan;
            }
            else if (ContractorEntity.ContractorPlanId == 3)
            {
                SelectedPlan = UnlimitedPlan;
            }
        }






    }


    private async void UploadButtonClick(UIMouseEventArgs e, AddImageFileElementModel model)
    {
        await UiJsHandler.TriggerClientClick(model.ElementId);
        StateHasChanged();
    }

    private async void DeleteUploadFile(UIMouseEventArgs e, AddImageFileElementModel model)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (model.ElementId == IdentityinputElementId)
            {
                IdentityImage.FileUploadImageData = null;
            }

            StateHasChanged();

        }


    }


    async Task UploadImageFile(UIChangeEventArgs __e, AddImageFileElementModel model)
    {


        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var files = await fileReaderService.CreateReference(model.Element).EnumerateFilesAsync();
            var file = files.First();
            await model.SetFile(file);
            StateHasChanged();
        }


    }



    async void AddAddress(UIMouseEventArgs __e)
    {
        AddEditContractorLocationFormModel = new AddEditContractorLocationFormModel();
        AddEditContractorLocationFormModel.EntityId = ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo.ContractorId;
        AddEditContractorLocationFormModel.FieldNameId = 7;
        AddEditContractorLocationFormModel.Name = $"Location {ContractorAddresses.Count() + 1}";
        AddEditContractorLocationFormModel.AreaKm = InstantDatahandler.All_AreaKms.First().Value;
        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        ModalSeetings.ShowModal = true;
    }

    async void DeleteAddress(UIMouseEventArgs __e, Guid addressId)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if ((await AddressSvc.Delete(addressId)).Success)
            {
                var r = ContractorAddresses.First(q => q.Id == addressId);
                ContractorAddresses.Remove(r);
                StateHasChanged();
            }
        }

    }


    async void EditAddress(UIMouseEventArgs __e, Guid Id)
    {

        var r = ContractorAddresses.First(q => q.Id == Id);

        AddEditContractorLocationFormModel = new AddEditContractorLocationFormModel();
        AddEditContractorLocationFormModel.Id = r.Id;
        AddEditContractorLocationFormModel.Name = r.Name;
        AddEditContractorLocationFormModel.CountryId = r.CountryId;
        AddEditContractorLocationFormModel.AreaKm = r.AreaKm;
        AddEditContractorLocationFormModel.RegionId = r.RegionId;
        AddEditContractorLocationFormModel.CityId = r.CityId;
        AddEditContractorLocationFormModel.EntityId = ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo.ContractorId;
        AddEditContractorLocationFormModel.FieldNameId = 7;

        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        if (AddEditContractorLocationFormModel.CountryId != null)
        {
            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == AddEditContractorLocationFormModel.CountryId)).OrderBy(q => q.Name);
            if (AddEditContractorLocationFormModel.RegionId != null)
            {
                CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == AddEditContractorLocationFormModel.RegionId)).OrderBy(q => q.Name);
            }
        }



        ModalSeetings.ShowModal = true;
        StateHasChanged();
    }


    async void HandleAddEditContractorLocationFormModelSubmit()
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if ((await AddressSvc.Upsert(AddEditContractorLocationFormModel)).Success)
            {
                await FillContractorAddresses();

                ModalSeetings.ShowModal = false;
                StateHasChanged();
            }


        }

    }

    async Task FillContractorAddresses()
    {
        ContractorAddresses = (await ContractorSvc.SelectContracotrLocations()).ToList();
    }


    async void HandleContractorApplicationModelSubmit()
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpsertNewContractorApplication(ContractorApplicationModel))
            {
                ContractorEntity = (await ContractorApplicationSvc._HHLQueryExecutionSvc.GetByAccountIdFromSessionAsync<e_Contractor>()).FirstOrDefault;

                HandleStepNext();
            }
        }

    }

    async Task SaveFileToContractor(UIMouseEventArgs __e, AddImageFileElementModel model)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var fileModel = new AddFileModel();
            fileModel.Name = model.FileName;
            fileModel.Stream = model.Data;
            if (model.ElementId == IdentityinputElementId)
            {

                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "IdentityFileId" && q.TableName == "Contractors").Id;
                if (await ContractorApplicationSvc.AddContractorIdentityFile(fileModel))
                {
                    HandleStepNext();
                }


            }
            else if (model.ElementId == WorkAuthorizationElementId)
            {
                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "WorkAuthorizationFileId" && q.TableName == "Contractors").Id;
                if (await ContractorApplicationSvc.AddContractorWorkorizationFile(fileModel))
                {
                    HandleStepNext();
                }
            }
            else if (model.ElementId == PhotoElementId)
            {
                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "PhotoFileId" && q.TableName == "Contractors").Id;

                if (await ContractorApplicationSvc.AddContractorPhotoFile(fileModel))
                {
                    HandleStepNext();
                }
            }

        }



    }

    async void SelectPlan(UIMouseEventArgs __e, e_ContractorPlan plan)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if (await ContractorApplicationSvc.UpdateContractorPlanApplication(plan.Id))
            {
                SelectedPlan = plan;

                HandleStepNext();
            }

        }

    }

    async Task SaveContractorLocations(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpdateApplicationStep(6))
            {

                HandleStepNext();
            }

        }
    }

    async Task SaveContractorServices(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpdateApplicationStep(7))
            {

                HandleStepNext();
            }

        }
    }

    async Task SaveContractorSchedule(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.AddContractorSchedule(AddSheduleFormModel))
            {
                ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo = await SessionSvc.GetContractorSessionInfo();
                UriHelper.NavigateTo($"/contractor/identity-verification", forceLoad: true);
            }
        }
    }

    async void HandleCustomCountryChange(UIChangeEventArgs __e)
    {
        ContractorApplicationModel.CountryId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (ContractorApplicationModel?.CountryId != null)
        {
            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == ContractorApplicationModel.CountryId)).OrderBy(q => q.Name);
            ContractorApplicationModel.CityId = null;
        }
        else
        {
            ContractorApplicationModel.RegionId = null;
            ContractorApplicationModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleCustomRegionChange(UIChangeEventArgs __e)
    {
        ContractorApplicationModel.RegionId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (ContractorApplicationModel?.RegionId != null)
        {
            CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == ContractorApplicationModel.RegionId)).OrderBy(q => q.Name);
        }
        else
        {
            ContractorApplicationModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleStepNext()
    {

        var nextIsActive = false;
        foreach (var t in Tabs)
        {

            if (t.IsActive)
            {
                nextIsActive = true;
                t.IsActive = false;
                t.IsPass = true;
            }
            else
            {
                if (nextIsActive)
                {
                    t.IsActive = true;
                    t.IsPass = false;
                    nextIsActive = false;
                }
            }


            t.ProcessTab();

        }
        ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo = await SessionSvc.GetContractorSessionInfo();
        StateHasChanged();

    }

    async void HandleStepBack(UIMouseEventArgs __e, int applicationstep)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {


            if (await ContractorApplicationSvc.UpdateApplicationStep(applicationstep))
            {

                                    var nextIsActive = false;
        Tabs.Reverse();
        foreach (var t in Tabs)
        {

            if (t.IsActive)
            {
                nextIsActive = true;
                t.IsActive = false;
                t.IsPass = false;
            }
            else
            {
                if (nextIsActive)
                {
                    t.IsActive = true;
                    t.IsPass = false;
                    nextIsActive = false;
                }

            }

            t.ProcessTab();

        }
        Tabs.Reverse();

                
              StateHasChanged();
            }






        }






      

    }



    async void HandleCustomCountryChange_Location(UIChangeEventArgs __e)
    {
        AddEditContractorLocationFormModel.CountryId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (AddEditContractorLocationFormModel?.CountryId != null)
        {
            LocationRegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == AddEditContractorLocationFormModel.CountryId)).OrderBy(q => q.Name);
            AddEditContractorLocationFormModel.CityId = null;
        }
        else
        {
            AddEditContractorLocationFormModel.RegionId = null;
            AddEditContractorLocationFormModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleCustomRegionChange_Location(UIChangeEventArgs __e)
    {
        AddEditContractorLocationFormModel.RegionId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (AddEditContractorLocationFormModel?.RegionId != null)
        {
            var existingCities = ContractorAddresses.Select(q => q.CityId);
            LocationCitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => !existingCities.Contains(q.Id) &&  q.RegionId == AddEditContractorLocationFormModel.RegionId)).OrderBy(q => q.Name);
        }
        else
        {
            AddEditContractorLocationFormModel.CityId = null;
        }

        StateHasChanged();
    }



    async Task LoadServicesData()
    {
        ContractorServices = await ContractorSvc.SelectCurrentContractorServices();


    }

    async void AddService(UIMouseEventArgs __e)
    {
        EditContractorServiceFormModel = new EditContractorServiceFormModel();
        ServiceModalSeetings.ShowModal = true;
        StateHasChanged();
    }

    public async void DeleteService(UIMouseEventArgs e, Guid projectId)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var isDeleted = await ContractorSvc.DeleteContractorService(projectId);
            if (isDeleted)
            {
                await LoadServicesData();
                StateHasChanged();
            }
        }

    }

    async void HandleCustomBuldingTypeChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.BuldingTypeId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToInt32(__e.Value.ToString()) : (int?)default;

        if (EditContractorServiceFormModel?.BuldingTypeId != null)
        {
            var existingServices = ContractorServices.Select(q => q.ServiceId).ToArray();
            ServiceSelectModels = _mapper.Map<IEnumerable<e_HomeTaskCategory>, IEnumerable<ServiceSelectModel>>(InstantDatahandler.All_HomeTaskCategories.Where(q => !existingServices.Contains(q.Id) &&  q.HomeBuldingTypeId == EditContractorServiceFormModel.BuldingTypeId)).OrderBy(q => q.Name);
            EditContractorServiceFormModel.ServiceId = null;
        }
        else
        {
            EditContractorServiceFormModel.ServiceId = null;
        }


        StateHasChanged();
    }

    async void HandleCustomServiceChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.ServiceId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToInt32(__e.Value.ToString()) : (int?)default;

        EditContractorServiceFormModel.IsCustomPrice = false;
        EditContractorServiceFormModel.Price = null;

        if (EditContractorServiceFormModel.ServiceId != null)
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }




        StateHasChanged();
    }


    async void HandleEditContractorServiceFormModelSubmit()

    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if ((await ContractorSvc.Upsert(EditContractorServiceFormModel)).Success)
            {
                await LoadServicesData();

                ServiceModalSeetings.ShowModal = false;
                StateHasChanged();
            }


        }
    }

    async void EditService(UIMouseEventArgs __e, Guid Id)
    {

        var r = ContractorServices.First(q => q.Id == Id);

        EditContractorServiceFormModel = new EditContractorServiceFormModel();
        EditContractorServiceFormModel.Id = r.Id;
        EditContractorServiceFormModel.IsCustomPrice = r.IsCustomPrice;
        EditContractorServiceFormModel.ServiceId = r.ServiceId;

        if (EditContractorServiceFormModel.IsCustomPrice)
        {
            EditContractorServiceFormModel.Price = r.PricePerHour;
        }
        else
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }


        StateHasChanged();
        ServiceModalSeetings.ShowModal = true;

    }


    async void HandleIsCustomPriceChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.IsCustomPrice = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToBoolean(__e.Value.ToString()) : false;


        if (!EditContractorServiceFormModel.IsCustomPrice)
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }


        StateHasChanged();
    }

}
