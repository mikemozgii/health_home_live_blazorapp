// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HHL.WebApp.Pages.Contractor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#line 1 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 4 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 5 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Components.Shared;

#line default
#line hidden
#line 7 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Auth.Core.Services;

#line default
#line hidden
#line 8 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Auth.Core;

#line default
#line hidden
#line 9 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Auth.Core.Models;

#line default
#line hidden
#line 10 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Auth.Core.Handlers;

#line default
#line hidden
#line 11 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Common;

#line default
#line hidden
#line 12 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Models;

#line default
#line hidden
#line 13 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Models.Client;

#line default
#line hidden
#line 14 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp;

#line default
#line hidden
#line 15 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Pages;

#line default
#line hidden
#line 16 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Models;

#line default
#line hidden
#line 17 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Services;

#line default
#line hidden
#line 18 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.DataAccess.Views;

#line default
#line hidden
#line 19 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.DataAccess.Entities;

#line default
#line hidden
#line 20 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using AutoMapper;

#line default
#line hidden
#line 21 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Handlers;

#line default
#line hidden
#line 22 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Services;

#line default
#line hidden
#line 23 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using MoreLinq;

#line default
#line hidden
#line 24 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.FileReader;

#line default
#line hidden
#line 25 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Handlers;

#line default
#line hidden
#line 26 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.DataAccess;

#line default
#line hidden
#line 27 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Shared;

#line default
#line hidden
#line 28 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Shared.Client;

#line default
#line hidden
#line 29 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Shared.Contractor;

#line default
#line hidden
#line 30 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Shared.Wizard;

#line default
#line hidden
#line 31 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.WebApp.Shared.Table;

#line default
#line hidden
#line 32 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Interfaces;

#line default
#line hidden
#line 33 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Models.Address;

#line default
#line hidden
#line 34 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#line 35 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Models.Contractor;

#line default
#line hidden
#line 36 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using Stripe;

#line default
#line hidden
#line 37 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\_Imports.razor"
using HHL.Core.Helpers;

#line default
#line hidden
#line 12 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\Pages\Contractor\Application.razor"
using System.IO;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/contractor/application")]
    public partial class Application : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 1147 "C:\Users\mikek\Source\Repos\HHL\HHL\HHL.WebApp\Pages\Contractor\Application.razor"
            

    ModalSeetings ModalSeetings { get; set; } = new ModalSeetings() { ShowModal = false };
    ModalSeetings ServiceModalSeetings { get; set; } = new ModalSeetings() { ShowModal = false };
    AddEditContractorLocationFormModel AddEditContractorLocationFormModel { get; set; } = new AddEditContractorLocationFormModel();
    EditContractorServiceFormModel EditContractorServiceFormModel { get; set; } = new EditContractorServiceFormModel();
    List<v_Address> ContractorAddresses { get; set; } = new List<v_Address>();
    IEnumerable<CountryCodeSelectModel> CountryCodeSelectModels;
    public List<WizardStepModel> Tabs;
    [Parameter]
    private bool isLoading { get; set; } = false;
    IEnumerable<CountrySelectModel> CountrySelectModels { get; set; } = Enumerable.Empty<CountrySelectModel>();
    IEnumerable<RegionSelectModel> RegionSelectModels { get; set; } = Enumerable.Empty<RegionSelectModel>();
    IEnumerable<CitySelectModel> CitySelectModels { get; set; } = Enumerable.Empty<CitySelectModel>();

    IEnumerable<RegionSelectModel> LocationRegionSelectModels { get; set; } = Enumerable.Empty<RegionSelectModel>();
    IEnumerable<CitySelectModel> LocationCitySelectModels { get; set; } = Enumerable.Empty<CitySelectModel>();

    IEnumerable<ServiceSelectModel> ServiceSelectModels = new List<ServiceSelectModel>();
    IEnumerable<e_Contractor_Service> ContractorServices = new List<e_Contractor_Service>();
    ContractorApplicationModel ContractorApplicationModel;
    Guid? ContractorPrimaryInfoPhoneId;

    e_ContractorPlan BasicPlan;
    IEnumerable<string> BasicPlanItems;
    e_ContractorPlan PremiumPlan;
    IEnumerable<string> PremiumPlanItems;
    e_ContractorPlan UnlimitedPlan;
    IEnumerable<string> UnlimitedPlanItems;

    e_ContractorPlan SelectedPlan;

    [Parameter]
    e_Contractor ContractorEntity { get; set; }

    public string IdentityinputElementId { get; set; } = "IdentityfileUpload";
    AddImageFileElementModel IdentityImage { get; set; } = new AddImageFileElementModel("IdentityfileUpload");

    public string WorkAuthorizationElementId { get; set; } = "WorkAuthorizationfileUpload";
    AddImageFileElementModel WorkAuthorizationImage { get; set; } = new AddImageFileElementModel("WorkAuthorizationfileUpload");

    public string PhotoElementId { get; set; } = "PhotofileUpload";
    AddImageFileElementModel PhotoImage { get; set; } = new AddImageFileElementModel("PhotofileUpload");

    //string IdentityinputElementId = "IdentityfileUpload";
    //ElementRef IdentityinputElement;
    //bool IsIdentityFileUploaded;
    //string IdentityFileUploadImageDate = String.Empty;
    //string IdentityFileUploadImageDate = String.Empty;


    public List<v_Address> Locations { get; set; }
    public AddSheduleFormModel AddSheduleFormModel { get; set; }



    protected override async Task OnInitializedAsync()
    {




        BasicPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 1);
        BasicPlanItems = new List<string>() {
            $"For Casual, Part-Time, Seasonal work",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"{BasicPlan.ServiceCategoryCount} Category",
            $"Limited to {BasicPlan.LocationLimitCount} Locations",
            $"Limited to {BasicPlan.TaskLimitCount} Tasks or  ${BasicPlan.BudgetLimitation.ToString("##")} per Day",
            "-No Review Verification",
            "-Not available for Search",


        };
        PremiumPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 2);
        PremiumPlanItems = new List<string>() {
            $"For Full-Time day-to-day service",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"Limited to {PremiumPlan.ServiceCategoryCount} Categories",
            $"Limited to {PremiumPlan.LocationLimitCount} Locations",
            $"Limited to {PremiumPlan.TaskLimitCount} Tasks or ${PremiumPlan.BudgetLimitation.ToString("##")} per Day",
            $"Limited Review Verification",
            "-Not available For SEO (Google, Adwords)",


        };
        UnlimitedPlan = InstantDatahandler.All_ContractorPlans.First(q => q.Id == 3);
        UnlimitedPlanItems = new List<string>() {
            $"For Advanced Buisinesses",
            $"{BasicPlan.Commission.ToString("##")}% Commission",
            $"Unlimited Service Types and Categories",
            $"Unlimited Locations",
            $"Unlimited Tasks and Orders per Day",
            "Full Review Verification",
            "Full SEO (Google, Adword and etc.)",

        };


        CountryCodeSelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountryCodeSelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        ContractorApplicationModel = new ContractorApplicationModel();
        Locations = new List<v_Address>();

        Tabs = new List<WizardStepModel>()
{

        new WizardStepModel("Legal Info", "building"),
        new WizardStepModel("Identity", "fingerprint"),
        new WizardStepModel("Work Authorization", "id-card"),
        new WizardStepModel("Photo", "user"),
        new WizardStepModel("Select Plan", "tasks"),
        new WizardStepModel("Locations", "map-marker"),
        new WizardStepModel("Services", "tools"),
        new WizardStepModel("Schedule", "clock"),
        //new WizardStepModel("Review", "file-alt"),
        };



        var tempAddSheduleShiftModel1 = new AddSheduleShiftModel() { TimeStart = TimeSpan.FromHours(8), TimeEnd = TimeSpan.FromHours(12) };
        var tempAddSheduleShiftModel2 = new AddSheduleShiftModel() { TimeStart = TimeSpan.FromHours(13), TimeEnd = TimeSpan.FromHours(17) };
        AddSheduleFormModel = new AddSheduleFormModel();
        AddSheduleFormModel.Days = new List<AddSheduleDayModel>();
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Monday", Id=1, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Tuesday", Id=2, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Wednesday", Id=3, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Thursday", Id=4, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Friday", Id=5, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() { tempAddSheduleShiftModel1, tempAddSheduleShiftModel2 } });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Saturday", Id=6, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() });
        AddSheduleFormModel.Days.Add(new AddSheduleDayModel() { Name = "Sunday", Id=7, AddSheduleDayModels_Include = new List<AddSheduleShiftModel>() });
        AddSheduleFormModel.ExclusionDays = new List<AddScheduleExclusionDay>();
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Good Friday", IsAllDay = true, Date = new DateTime(2019, 04, 19), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Victoria Day", IsAllDay = true, Date = new DateTime(2019, 05, 20), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Canada Day", IsAllDay = true, Date = new DateTime(2019, 07, 01), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Thanksgiving Day", IsAllDay = true, Date = new DateTime(2019, 10, 14), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Remembrance Day", IsAllDay = true, Date = new DateTime(2019, 11, 11), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Christmas Day", IsAllDay = true, Date = new DateTime(2019, 12, 26), IsStatHoliday = true });
        AddSheduleFormModel.ExclusionDays.Add(new AddScheduleExclusionDay() { Name = "Boxing Day", IsAllDay = true, Date = new DateTime(2019, 12, 26), IsStatHoliday = true });


        ContractorEntity = (await ContractorApplicationSvc._HHLQueryExecutionSvc.GetByAccountIdFromSessionAsync<e_Contractor>()).FirstOrDefault;

        //Application is Complete and waiting for Review
        if (ContractorEntity != null && ContractorEntity.ContractorStatusId != (int)ContractorStatus.ApplicationInProgress)
        {
            UriHelper.NavigateTo($"/contractor/identity-verification", forceLoad: true);
        }

        //IdentityImage = new AddImageFileElementModel(IdentityinputElementId);
        //WorkAuthorizationImage = new AddImageFileElementModel(WorkAuthorizationElementId);
        //PhotoImage = new AddImageFileElementModel(PhotoElementId);




        


        if (ContractorEntity != null)
        {
             var r = await ContractorSvc.SelectCurrent_EditView();
            ContractorApplicationModel.Id = r.Id;
            ContractorApplicationModel.FirstName = r.FirstName;
            ContractorApplicationModel.LastName = r.LastName;
            ContractorApplicationModel.OrganizationName = r.OrganizationName;
            ContractorApplicationModel.OrganizationIdentity = r.OrganizationIdentity;
            ContractorApplicationModel.OrganizationTaxNumber = r.OrganizationTaxNumber;
            ContractorApplicationModel.DateOfBirth = r.DateOfBirth;
            ContractorApplicationModel.PrimaryAddressId = r.PrimaryAddressId;
            ContractorApplicationModel.PrimaryEmailId = r.PrimaryEmailId;
            ContractorApplicationModel.PrimaryPhoneId = r.PrimaryPhoneId;
            ContractorApplicationModel.PrimaryEmailName = r.PrimaryEmailName;
            ContractorApplicationModel.PhoneCountryCodeId = r.PhoneCountryCodeId;
            ContractorApplicationModel.PhoneNumber = r.PhoneNumber;
            ContractorApplicationModel.CityId = r.PrimaryAddressCityId;
            ContractorApplicationModel.CountryId = r.PrimaryAddressCountryId;
            ContractorApplicationModel.RegionId = r.PrimaryAddressRegionId;
            ContractorApplicationModel.PostalCode = r.PrimaryAddressPostalCode;
            ContractorApplicationModel.Line1 = r.PrimaryAddressLine1;
            ContractorApplicationModel.Line2 = r.PrimaryAddressLine2;

            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == ContractorApplicationModel.CountryId)).OrderBy(q => q.Name);
            CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == ContractorApplicationModel.RegionId)).OrderBy(q => q.Name);
        }


        if (ContractorEntity != null)
        {
            Tabs[(int)ContractorEntity.ApplicationStep].IsActive = true;
            Tabs[(int)ContractorEntity.ApplicationStep].ProcessTab();
            for (var i = 0; i < ContractorEntity.ApplicationStep; i++)
            {
                Tabs[i].IsPass = true;
                Tabs[i].ProcessTab();
            }

        }
        else
        {
            Tabs[0].IsActive = true;
            Tabs[0].ProcessTab();
        }



        if (ContractorEntity != null)
        {
            await FillContractorAddresses();
            await LoadServicesData();
            if (ContractorEntity.ContractorPlanId == 1)
            {
                SelectedPlan = BasicPlan;
            }
            else if (ContractorEntity.ContractorPlanId == 2)
            {
                SelectedPlan = PremiumPlan;
            }
            else if (ContractorEntity.ContractorPlanId == 3)
            {
                SelectedPlan = UnlimitedPlan;
            }
        }






    }


    private async void UploadButtonClick(UIMouseEventArgs e, AddImageFileElementModel model)
    {
        await UiJsHandler.TriggerClientClick(model.ElementId);
        StateHasChanged();
    }

    private async void DeleteUploadFile(UIMouseEventArgs e, AddImageFileElementModel model)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (model.ElementId == IdentityinputElementId)
            {
                IdentityImage.FileUploadImageData = null;
            }

            StateHasChanged();

        }


    }


    async Task UploadImageFile(UIChangeEventArgs __e, AddImageFileElementModel model)
    {


        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var files = await fileReaderService.CreateReference(model.Element).EnumerateFilesAsync();
            var file = files.First();
            await model.SetFile(file);
            StateHasChanged();
        }


    }



    async void AddAddress(UIMouseEventArgs __e)
    {
        AddEditContractorLocationFormModel = new AddEditContractorLocationFormModel();
        AddEditContractorLocationFormModel.EntityId = ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo.ContractorId;
        AddEditContractorLocationFormModel.FieldNameId = 7;
        AddEditContractorLocationFormModel.Name = $"Location {ContractorAddresses.Count() + 1}";
        AddEditContractorLocationFormModel.AreaKm = InstantDatahandler.All_AreaKms.First().Value;
        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        ModalSeetings.ShowModal = true;
    }

    async void DeleteAddress(UIMouseEventArgs __e, Guid addressId)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if ((await AddressSvc.Delete(addressId)).Success)
            {
                var r = ContractorAddresses.First(q => q.Id == addressId);
                ContractorAddresses.Remove(r);
                StateHasChanged();
            }
        }

    }


    async void EditAddress(UIMouseEventArgs __e, Guid Id)
    {

        var r = ContractorAddresses.First(q => q.Id == Id);

        AddEditContractorLocationFormModel = new AddEditContractorLocationFormModel();
        AddEditContractorLocationFormModel.Id = r.Id;
        AddEditContractorLocationFormModel.Name = r.Name;
        AddEditContractorLocationFormModel.CountryId = r.CountryId;
        AddEditContractorLocationFormModel.AreaKm = r.AreaKm;
        AddEditContractorLocationFormModel.RegionId = r.RegionId;
        AddEditContractorLocationFormModel.CityId = r.CityId;
        AddEditContractorLocationFormModel.EntityId = ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo.ContractorId;
        AddEditContractorLocationFormModel.FieldNameId = 7;

        CountrySelectModels = _mapper.Map<IEnumerable<e_Country>, IEnumerable<CountrySelectModel>>(InstantDatahandler.All_Countries).OrderBy(q => q.Name != "United States");
        if (AddEditContractorLocationFormModel.CountryId != null)
        {
            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == AddEditContractorLocationFormModel.CountryId)).OrderBy(q => q.Name);
            if (AddEditContractorLocationFormModel.RegionId != null)
            {
                CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == AddEditContractorLocationFormModel.RegionId)).OrderBy(q => q.Name);
            }
        }



        ModalSeetings.ShowModal = true;
        StateHasChanged();
    }


    async void HandleAddEditContractorLocationFormModelSubmit()
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if ((await AddressSvc.Upsert(AddEditContractorLocationFormModel)).Success)
            {
                await FillContractorAddresses();

                ModalSeetings.ShowModal = false;
                StateHasChanged();
            }


        }

    }

    async Task FillContractorAddresses()
    {
        ContractorAddresses = (await ContractorSvc.SelectContracotrLocations()).ToList();
    }


    async void HandleContractorApplicationModelSubmit()
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpsertNewContractorApplication(ContractorApplicationModel))
            {
                ContractorEntity = (await ContractorApplicationSvc._HHLQueryExecutionSvc.GetByAccountIdFromSessionAsync<e_Contractor>()).FirstOrDefault;

                HandleStepNext();
            }
        }

    }

    async Task SaveFileToContractor(UIMouseEventArgs __e, AddImageFileElementModel model)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var fileModel = new AddFileModel();
            fileModel.Name = model.FileName;
            fileModel.Stream = model.Data;
            if (model.ElementId == IdentityinputElementId)
            {

                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "IdentityFileId" && q.TableName == "Contractors").Id;
                if (await ContractorApplicationSvc.AddContractorIdentityFile(fileModel))
                {
                    HandleStepNext();
                }


            }
            else if (model.ElementId == WorkAuthorizationElementId)
            {
                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "WorkAuthorizationFileId" && q.TableName == "Contractors").Id;
                if (await ContractorApplicationSvc.AddContractorWorkorizationFile(fileModel))
                {
                    HandleStepNext();
                }
            }
            else if (model.ElementId == PhotoElementId)
            {
                fileModel.FieldNameId = InstantDatahandler.All_FieldNames.First(q => q.Name == "PhotoFileId" && q.TableName == "Contractors").Id;

                if (await ContractorApplicationSvc.AddContractorPhotoFile(fileModel))
                {
                    HandleStepNext();
                }
            }

        }



    }

    async void SelectPlan(UIMouseEventArgs __e, e_ContractorPlan plan)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if (await ContractorApplicationSvc.UpdateContractorPlanApplication(plan.Id))
            {
                SelectedPlan = plan;

                HandleStepNext();
            }

        }

    }

    async Task SaveContractorLocations(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpdateApplicationStep(6))
            {

                HandleStepNext();
            }

        }
    }

    async Task SaveContractorServices(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.UpdateApplicationStep(7))
            {

                HandleStepNext();
            }

        }
    }

    async Task SaveContractorSchedule(UIMouseEventArgs __e)
    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            if (await ContractorApplicationSvc.AddContractorSchedule(AddSheduleFormModel))
            {
                ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo = await SessionSvc.GetContractorSessionInfo();
                UriHelper.NavigateTo($"/contractor/identity-verification", forceLoad: true);
            }
        }
    }

    async void HandleCustomCountryChange(UIChangeEventArgs __e)
    {
        ContractorApplicationModel.CountryId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (ContractorApplicationModel?.CountryId != null)
        {
            RegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == ContractorApplicationModel.CountryId)).OrderBy(q => q.Name);
            ContractorApplicationModel.CityId = null;
        }
        else
        {
            ContractorApplicationModel.RegionId = null;
            ContractorApplicationModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleCustomRegionChange(UIChangeEventArgs __e)
    {
        ContractorApplicationModel.RegionId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (ContractorApplicationModel?.RegionId != null)
        {
            CitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => q.RegionId == ContractorApplicationModel.RegionId)).OrderBy(q => q.Name);
        }
        else
        {
            ContractorApplicationModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleStepNext()
    {

        var nextIsActive = false;
        foreach (var t in Tabs)
        {

            if (t.IsActive)
            {
                nextIsActive = true;
                t.IsActive = false;
                t.IsPass = true;
            }
            else
            {
                if (nextIsActive)
                {
                    t.IsActive = true;
                    t.IsPass = false;
                    nextIsActive = false;
                }
            }


            t.ProcessTab();

        }
        ContractorApplicationSvc._HHLQueryExecutionSvc._AccountSession.ContractorInfo = await SessionSvc.GetContractorSessionInfo();
        StateHasChanged();

    }

    async void HandleStepBack(UIMouseEventArgs __e, int applicationstep)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {


            if (await ContractorApplicationSvc.UpdateApplicationStep(applicationstep))
            {

                                    var nextIsActive = false;
        Tabs.Reverse();
        foreach (var t in Tabs)
        {

            if (t.IsActive)
            {
                nextIsActive = true;
                t.IsActive = false;
                t.IsPass = false;
            }
            else
            {
                if (nextIsActive)
                {
                    t.IsActive = true;
                    t.IsPass = false;
                    nextIsActive = false;
                }

            }

            t.ProcessTab();

        }
        Tabs.Reverse();

                
              StateHasChanged();
            }






        }






      

    }



    async void HandleCustomCountryChange_Location(UIChangeEventArgs __e)
    {
        AddEditContractorLocationFormModel.CountryId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (AddEditContractorLocationFormModel?.CountryId != null)
        {
            LocationRegionSelectModels = _mapper.Map<IEnumerable<e_Region>, IEnumerable<RegionSelectModel>>(InstantDatahandler.All_Regions.Where(q => q.CountryId == AddEditContractorLocationFormModel.CountryId)).OrderBy(q => q.Name);
            AddEditContractorLocationFormModel.CityId = null;
        }
        else
        {
            AddEditContractorLocationFormModel.RegionId = null;
            AddEditContractorLocationFormModel.CityId = null;
        }

        StateHasChanged();
    }

    async void HandleCustomRegionChange_Location(UIChangeEventArgs __e)
    {
        AddEditContractorLocationFormModel.RegionId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? new Guid(__e.Value.ToString()) : (Guid?)default;

        if (AddEditContractorLocationFormModel?.RegionId != null)
        {
            var existingCities = ContractorAddresses.Select(q => q.CityId);
            LocationCitySelectModels = _mapper.Map<IEnumerable<e_City>, IEnumerable<CitySelectModel>>(InstantDatahandler.All_Cities.Where(q => !existingCities.Contains(q.Id) &&  q.RegionId == AddEditContractorLocationFormModel.RegionId)).OrderBy(q => q.Name);
        }
        else
        {
            AddEditContractorLocationFormModel.CityId = null;
        }

        StateHasChanged();
    }



    async Task LoadServicesData()
    {
        ContractorServices = await ContractorSvc.SelectCurrentContractorServices();


    }

    async void AddService(UIMouseEventArgs __e)
    {
        EditContractorServiceFormModel = new EditContractorServiceFormModel();
        ServiceModalSeetings.ShowModal = true;
        StateHasChanged();
    }

    public async void DeleteService(UIMouseEventArgs e, Guid projectId)
    {

        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {
            var isDeleted = await ContractorSvc.DeleteContractorService(projectId);
            if (isDeleted)
            {
                await LoadServicesData();
                StateHasChanged();
            }
        }

    }

    async void HandleCustomBuldingTypeChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.BuldingTypeId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToInt32(__e.Value.ToString()) : (int?)default;

        if (EditContractorServiceFormModel?.BuldingTypeId != null)
        {
            var existingServices = ContractorServices.Select(q => q.ServiceId).ToArray();
            ServiceSelectModels = _mapper.Map<IEnumerable<e_HomeTaskCategory>, IEnumerable<ServiceSelectModel>>(InstantDatahandler.All_HomeTaskCategories.Where(q => !existingServices.Contains(q.Id) &&  q.HomeBuldingTypeId == EditContractorServiceFormModel.BuldingTypeId)).OrderBy(q => q.Name);
            EditContractorServiceFormModel.ServiceId = null;
        }
        else
        {
            EditContractorServiceFormModel.ServiceId = null;
        }


        StateHasChanged();
    }

    async void HandleCustomServiceChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.ServiceId = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToInt32(__e.Value.ToString()) : (int?)default;

        EditContractorServiceFormModel.IsCustomPrice = false;
        EditContractorServiceFormModel.Price = null;

        if (EditContractorServiceFormModel.ServiceId != null)
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }




        StateHasChanged();
    }


    async void HandleEditContractorServiceFormModelSubmit()

    {
        using (var ls = await new LoadingScreen(UiJsHandler).Load())
        {

            if ((await ContractorSvc.Upsert(EditContractorServiceFormModel)).Success)
            {
                await LoadServicesData();

                ServiceModalSeetings.ShowModal = false;
                StateHasChanged();
            }


        }
    }

    async void EditService(UIMouseEventArgs __e, Guid Id)
    {

        var r = ContractorServices.First(q => q.Id == Id);

        EditContractorServiceFormModel = new EditContractorServiceFormModel();
        EditContractorServiceFormModel.Id = r.Id;
        EditContractorServiceFormModel.IsCustomPrice = r.IsCustomPrice;
        EditContractorServiceFormModel.ServiceId = r.ServiceId;

        if (EditContractorServiceFormModel.IsCustomPrice)
        {
            EditContractorServiceFormModel.Price = r.PricePerHour;
        }
        else
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }


        StateHasChanged();
        ServiceModalSeetings.ShowModal = true;

    }


    async void HandleIsCustomPriceChange(UIChangeEventArgs __e)
    {
        EditContractorServiceFormModel.IsCustomPrice = !string.IsNullOrWhiteSpace(__e.Value.ToString()) ? Convert.ToBoolean(__e.Value.ToString()) : false;


        if (!EditContractorServiceFormModel.IsCustomPrice)
        {
            var homeTaskCategory = InstantDatahandler.All_HomeTaskCategories.First(q => q.Id == EditContractorServiceFormModel.ServiceId);
            EditContractorServiceFormModel.Price = Convert.ToDecimal((HHLConfigHdr.PricePerHourSell * homeTaskCategory.PriceMultiplier).ToString("#.00"));
        }


        StateHasChanged();
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ContractorSvc ContractorSvc { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AddressSvc AddressSvc { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private InstantDatahandler InstantDatahandler { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SessionSvc SessionSvc { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ContractorApplicationSvc ContractorApplicationSvc { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.IUriHelper UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HHL.WebApp.Handlers.UiJsHandler UiJsHandler { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService fileReaderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AutoMapper.IMapper _mapper { get; set; }
    }
}
#pragma warning restore 1591
